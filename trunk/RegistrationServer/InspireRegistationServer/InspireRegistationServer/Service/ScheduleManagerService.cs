//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ServiceModel.Activation;
using Inspire.Server.ScheduleManager.BusinessLogic;
using Inspire.Server.ScheduleManager.DataContracts;
using Inspire.Server.ScheduleManager.MessageContracts;
using Inspire.Server.ScheduleManager.ServiceContracts;
using WCF = global::System.ServiceModel;

namespace Inspire.Server.ScheduleManager.ServiceImplementation
{	
	/// <summary>
	/// Service Class - ScheduleManagerService
	/// </summary>
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
	[WCF::ServiceBehavior(Name = "ScheduleManagerService", 
		Namespace = "http://schemas.inspiredisplays.com/ServiceContract/", 
		InstanceContextMode = WCF::InstanceContextMode.PerSession, 
		ConcurrencyMode = WCF::ConcurrencyMode.Single )]
	public abstract class ScheduleManagerServiceBase : IServiceManagerServiceContract
	{
		#region ServiceManagerServiceContract Members


        public virtual GetScheduleFromHostnameResponseMessage GetSchedulesFromHostName(GetSchedulesFromHostnameRequestMessage request)
        {
            bool updated;
            GetScheduleFromHostnameResponseMessage response = new GetScheduleFromHostnameResponseMessage();
            response.Schedules = new Schedules();
            response.Schedules = ScheduleAccessFasade.GetSchedulesFromHostname(request.Hostname, request.AlwaysSendSchedule, out updated);
            response.Updated = updated;
            return response;
        }

		public virtual GetScheduleResponseMessage GetSchedules(GetSchedulesRequestMessage request)
		{
            GetScheduleResponseMessage response = new GetScheduleResponseMessage();
            response.Schedules = new Schedules();
            response.Schedules = ScheduleAccessFasade.GetSchedules(request.DisplayID);
            return response;
		}

        public virtual GetScheduleResponseMessage GetCurrentSchedules(GetSchedulesRequestMessage request)
        {
            GetScheduleResponseMessage response = new GetScheduleResponseMessage();
            response.Schedules = new Schedules();
            response.Schedules = ScheduleAccessFasade.GetSchedules(request.DisplayID);
            return response;
        }

        public virtual GetSingleScheduleResponseMessage GetSingleSchedule(GetSingleSchedulesRequestMessage request)
        {
            GetSingleScheduleResponseMessage response = new GetSingleScheduleResponseMessage();
            response.Schedule = new Schedule();
            response.Schedule = ScheduleAccessFasade.GetSingleSchedule(request.ScheduleID);
            return response;
        }

        public virtual GetDisplaysInScheduleResponseMessage GetDisplaysInSchedule(GetDisplaysInScheduleRequestMessage request)
        {
            GetDisplaysInScheduleResponseMessage response = new GetDisplaysInScheduleResponseMessage();
            response.Displays = ScheduleAccessFasade.GetDisplaysInSchedule(request.ScheduleID);
            return response;
        }
        
		public virtual AddScheduleResponseMessage AddSchedule(AddScheduleRequestMessage request)
		{
            AddScheduleResponseMessage response = new AddScheduleResponseMessage();
            ScheduleAccessFasade.AddSchedule(request.Schedule, request.DisplayIDs);
            return response;
		}

		public virtual UpdateScheduleResponseMessage UpdateSchedule(UpdateScheduleRequestSchedule request)
		{
            UpdateScheduleResponseMessage response = new UpdateScheduleResponseMessage();
            ScheduleAccessFasade.UpdateSchedule(request.Schedule, request.DisplayIDs);
            return response;
		}

		public virtual DeleteScheduleResponseMessage DeleteSchedule(DeleteScheduleRequestMessage request)
		{
            DeleteScheduleResponseMessage response = new DeleteScheduleResponseMessage();
            ScheduleAccessFasade.DeleteSchedule(request.ScheduleID);
            return response;
		}

		#endregion		
		
	}
	
	public partial class ScheduleManagerService : ScheduleManagerServiceBase
	{
	}
	
}

