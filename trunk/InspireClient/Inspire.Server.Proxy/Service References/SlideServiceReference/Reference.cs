//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inspire.Server.Proxy.SlideServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Slides", Namespace="http://schemas.inspiredisplays.com", ItemName="Slides")]
    [System.SerializableAttribute()]
    public class Slides : System.Collections.Generic.List<Inspire.Server.Proxy.SlideServiceReference.Slide> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Slide", Namespace="http://schemas.inspiredisplays.com")]
    [System.SerializableAttribute()]
    public partial class Slide : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VResolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HResolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ThumbnailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inspire.Server.Proxy.SlideServiceReference.Buttons ButtonsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inspire.Server.Proxy.SlideServiceReference.SlideRules SlideRulesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inspire.Server.Proxy.SlideServiceReference.SlideTags SlideTagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DefaultDurationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GUIDField, value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public double VResolution {
            get {
                return this.VResolutionField;
            }
            set {
                if ((this.VResolutionField.Equals(value) != true)) {
                    this.VResolutionField = value;
                    this.RaisePropertyChanged("VResolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public double HResolution {
            get {
                return this.HResolutionField;
            }
            set {
                if ((this.HResolutionField.Equals(value) != true)) {
                    this.HResolutionField = value;
                    this.RaisePropertyChanged("HResolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public byte[] Thumbnail {
            get {
                return this.ThumbnailField;
            }
            set {
                if ((object.ReferenceEquals(this.ThumbnailField, value) != true)) {
                    this.ThumbnailField = value;
                    this.RaisePropertyChanged("Thumbnail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByField, value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public System.Nullable<System.DateTime> LastModifiedDate {
            get {
                return this.LastModifiedDateField;
            }
            set {
                if ((this.LastModifiedDateField.Equals(value) != true)) {
                    this.LastModifiedDateField = value;
                    this.RaisePropertyChanged("LastModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public Inspire.Server.Proxy.SlideServiceReference.Buttons Buttons {
            get {
                return this.ButtonsField;
            }
            set {
                if ((object.ReferenceEquals(this.ButtonsField, value) != true)) {
                    this.ButtonsField = value;
                    this.RaisePropertyChanged("Buttons");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public Inspire.Server.Proxy.SlideServiceReference.SlideRules SlideRules {
            get {
                return this.SlideRulesField;
            }
            set {
                if ((object.ReferenceEquals(this.SlideRulesField, value) != true)) {
                    this.SlideRulesField = value;
                    this.RaisePropertyChanged("SlideRules");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public Inspire.Server.Proxy.SlideServiceReference.SlideTags SlideTags {
            get {
                return this.SlideTagsField;
            }
            set {
                if ((object.ReferenceEquals(this.SlideTagsField, value) != true)) {
                    this.SlideTagsField = value;
                    this.RaisePropertyChanged("SlideTags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public System.Nullable<System.DateTime> DefaultDuration {
            get {
                return this.DefaultDurationField;
            }
            set {
                if ((this.DefaultDurationField.Equals(value) != true)) {
                    this.DefaultDurationField = value;
                    this.RaisePropertyChanged("DefaultDuration");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Buttons", Namespace="http://schemas.inspiredisplays.com", ItemName="Buttons")]
    [System.SerializableAttribute()]
    public class Buttons : System.Collections.Generic.List<Inspire.Server.Proxy.SlideServiceReference.Button> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="SlideRules", Namespace="http://schemas.inspiredisplays.com", ItemName="SlideRules")]
    [System.SerializableAttribute()]
    public class SlideRules : System.Collections.Generic.List<Inspire.Server.Proxy.SlideServiceReference.SlideRule> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="SlideTags", Namespace="http://schemas.inspiredisplays.com", ItemName="SlideTags")]
    [System.SerializableAttribute()]
    public class SlideTags : System.Collections.Generic.List<Inspire.Server.Proxy.SlideServiceReference.SlideTag> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Button", Namespace="http://schemas.inspiredisplays.com")]
    [System.SerializableAttribute()]
    public partial class Button : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SlideIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ButtonNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduledSlideIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SlideGuidToNavigateToField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GUIDField, value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SlideID {
            get {
                return this.SlideIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SlideIDField, value) != true)) {
                    this.SlideIDField = value;
                    this.RaisePropertyChanged("SlideID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string ButtonName {
            get {
                return this.ButtonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ButtonNameField, value) != true)) {
                    this.ButtonNameField = value;
                    this.RaisePropertyChanged("ButtonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string ScheduledSlideID {
            get {
                return this.ScheduledSlideIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledSlideIDField, value) != true)) {
                    this.ScheduledSlideIDField = value;
                    this.RaisePropertyChanged("ScheduledSlideID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string SlideGuidToNavigateTo {
            get {
                return this.SlideGuidToNavigateToField;
            }
            set {
                if ((object.ReferenceEquals(this.SlideGuidToNavigateToField, value) != true)) {
                    this.SlideGuidToNavigateToField = value;
                    this.RaisePropertyChanged("SlideGuidToNavigateTo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SlideRule", Namespace="http://schemas.inspiredisplays.com")]
    [System.SerializableAttribute()]
    public partial class SlideRule : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SlideIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RuleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GUIDField, value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SlideID {
            get {
                return this.SlideIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SlideIDField, value) != true)) {
                    this.SlideIDField = value;
                    this.RaisePropertyChanged("SlideID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Rule {
            get {
                return this.RuleField;
            }
            set {
                if ((object.ReferenceEquals(this.RuleField, value) != true)) {
                    this.RuleField = value;
                    this.RaisePropertyChanged("Rule");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SlideTag", Namespace="http://schemas.inspiredisplays.com")]
    [System.SerializableAttribute()]
    public partial class SlideTag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SlideIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GUIDField, value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SlideID {
            get {
                return this.SlideIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SlideIDField, value) != true)) {
                    this.SlideIDField = value;
                    this.RaisePropertyChanged("SlideID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tag {
            get {
                return this.TagField;
            }
            set {
                if ((object.ReferenceEquals(this.TagField, value) != true)) {
                    this.TagField = value;
                    this.RaisePropertyChanged("Tag");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com")]
    [System.SerializableAttribute()]
    public partial class GeneralFaultContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDescField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDesc {
            get {
                return this.ErrorDescField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDescField, value) != true)) {
                    this.ErrorDescField = value;
                    this.RaisePropertyChanged("ErrorDesc");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.inspiredisplays.com", ConfigurationName="SlideServiceReference.SlideManagerServiceContract")]
    public interface SlideManagerServiceContract {
        
        // CODEGEN: Generating message contract since the operation GetAllSlides is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/SlideManagerServiceContract/GetAllSlides", ReplyAction="http://schemas.inspiredisplays.com/SlideManagerServiceContract/GetAllSlidesRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Server.Proxy.SlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/SlideManagerServiceContract/GetAllSlidesGenera" +
            "lFaultContractFault", Name="GeneralFaultContract")]
        Inspire.Server.Proxy.SlideServiceReference.GetAllSlidesResponseMessage GetAllSlides(Inspire.Server.Proxy.SlideServiceReference.GetAllSlidesRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation GetSlide is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/SlideManagerServiceContract/GetSlide", ReplyAction="http://schemas.inspiredisplays.com/SlideManagerServiceContract/GetSlideResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Server.Proxy.SlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/SlideManagerServiceContract/GetSlideGeneralFau" +
            "ltContractFault", Name="GeneralFaultContract")]
        Inspire.Server.Proxy.SlideServiceReference.GetSlideResponseMessage GetSlide(Inspire.Server.Proxy.SlideServiceReference.GetSlideRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation AddSlide is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/SlideManagerServiceContract/AddSlide", ReplyAction="http://schemas.inspiredisplays.com/SlideManagerServiceContract/AddSlideResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Server.Proxy.SlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/SlideManagerServiceContract/AddSlideGeneralFau" +
            "ltContractFault", Name="GeneralFaultContract")]
        Inspire.Server.Proxy.SlideServiceReference.AddSlideResponseMessage AddSlide(Inspire.Server.Proxy.SlideServiceReference.AddSlideRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation UpdateSlide is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/SlideManagerServiceContract/UpdateSlide", ReplyAction="http://schemas.inspiredisplays.com/SlideManagerServiceContract/UpdateSlideRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Server.Proxy.SlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/SlideManagerServiceContract/UpdateSlideGeneral" +
            "FaultContractFault", Name="GeneralFaultContract")]
        Inspire.Server.Proxy.SlideServiceReference.UpdateSlideResponseMessage UpdateSlide(Inspire.Server.Proxy.SlideServiceReference.UpdateSlideRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation DeleteSlide is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/SlideManagerServiceContract/DeleteSlide", ReplyAction="http://schemas.inspiredisplays.com/SlideManagerServiceContract/DeleteSlideRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Server.Proxy.SlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/SlideManagerServiceContract/DeleteSlideGeneral" +
            "FaultContractFault", Name="GeneralFaultContract")]
        Inspire.Server.Proxy.SlideServiceReference.DeleteSlideResponseMessage DeleteSlide(Inspire.Server.Proxy.SlideServiceReference.DeleteSlideRequestMessage request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetAllSlidesRequestMessage {
        
        public GetAllSlidesRequestMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetAllSlidesResponseMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com", Order=0)]
        public Inspire.Server.Proxy.SlideServiceReference.Slides Slides;
        
        public GetAllSlidesResponseMessage() {
        }
        
        public GetAllSlidesResponseMessage(Inspire.Server.Proxy.SlideServiceReference.Slides Slides) {
            this.Slides = Slides;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetSlideRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com", Order=0)]
        public string SlideID;
        
        public GetSlideRequestMessage() {
        }
        
        public GetSlideRequestMessage(string SlideID) {
            this.SlideID = SlideID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetSlideResponseMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com", Order=0)]
        public Inspire.Server.Proxy.SlideServiceReference.Slide Slide;
        
        public GetSlideResponseMessage() {
        }
        
        public GetSlideResponseMessage(Inspire.Server.Proxy.SlideServiceReference.Slide Slide) {
            this.Slide = Slide;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddSlideRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com", Order=0)]
        public Inspire.Server.Proxy.SlideServiceReference.Slide Slide;
        
        public AddSlideRequestMessage() {
        }
        
        public AddSlideRequestMessage(Inspire.Server.Proxy.SlideServiceReference.Slide Slide) {
            this.Slide = Slide;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddSlideResponseMessage {
        
        public AddSlideResponseMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateSlideRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com", Order=0)]
        public Inspire.Server.Proxy.SlideServiceReference.Slide Slide;
        
        public UpdateSlideRequestMessage() {
        }
        
        public UpdateSlideRequestMessage(Inspire.Server.Proxy.SlideServiceReference.Slide Slide) {
            this.Slide = Slide;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateSlideResponseMessage {
        
        public UpdateSlideResponseMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteSlideRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com", Order=0)]
        public string SlideID;
        
        public DeleteSlideRequestMessage() {
        }
        
        public DeleteSlideRequestMessage(string SlideID) {
            this.SlideID = SlideID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteSlideResponseMessage {
        
        public DeleteSlideResponseMessage() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SlideManagerServiceContractChannel : Inspire.Server.Proxy.SlideServiceReference.SlideManagerServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SlideManagerServiceContractClient : System.ServiceModel.ClientBase<Inspire.Server.Proxy.SlideServiceReference.SlideManagerServiceContract>, Inspire.Server.Proxy.SlideServiceReference.SlideManagerServiceContract {
        
        public SlideManagerServiceContractClient() {
        }
        
        public SlideManagerServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SlideManagerServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SlideManagerServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SlideManagerServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Server.Proxy.SlideServiceReference.GetAllSlidesResponseMessage Inspire.Server.Proxy.SlideServiceReference.SlideManagerServiceContract.GetAllSlides(Inspire.Server.Proxy.SlideServiceReference.GetAllSlidesRequestMessage request) {
            return base.Channel.GetAllSlides(request);
        }
        
        public Inspire.Server.Proxy.SlideServiceReference.Slides GetAllSlides() {
            Inspire.Server.Proxy.SlideServiceReference.GetAllSlidesRequestMessage inValue = new Inspire.Server.Proxy.SlideServiceReference.GetAllSlidesRequestMessage();
            Inspire.Server.Proxy.SlideServiceReference.GetAllSlidesResponseMessage retVal = ((Inspire.Server.Proxy.SlideServiceReference.SlideManagerServiceContract)(this)).GetAllSlides(inValue);
            return retVal.Slides;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Server.Proxy.SlideServiceReference.GetSlideResponseMessage Inspire.Server.Proxy.SlideServiceReference.SlideManagerServiceContract.GetSlide(Inspire.Server.Proxy.SlideServiceReference.GetSlideRequestMessage request) {
            return base.Channel.GetSlide(request);
        }
        
        public Inspire.Server.Proxy.SlideServiceReference.Slide GetSlide(string SlideID) {
            Inspire.Server.Proxy.SlideServiceReference.GetSlideRequestMessage inValue = new Inspire.Server.Proxy.SlideServiceReference.GetSlideRequestMessage();
            inValue.SlideID = SlideID;
            Inspire.Server.Proxy.SlideServiceReference.GetSlideResponseMessage retVal = ((Inspire.Server.Proxy.SlideServiceReference.SlideManagerServiceContract)(this)).GetSlide(inValue);
            return retVal.Slide;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Server.Proxy.SlideServiceReference.AddSlideResponseMessage Inspire.Server.Proxy.SlideServiceReference.SlideManagerServiceContract.AddSlide(Inspire.Server.Proxy.SlideServiceReference.AddSlideRequestMessage request) {
            return base.Channel.AddSlide(request);
        }
        
        public void AddSlide(Inspire.Server.Proxy.SlideServiceReference.Slide Slide) {
            Inspire.Server.Proxy.SlideServiceReference.AddSlideRequestMessage inValue = new Inspire.Server.Proxy.SlideServiceReference.AddSlideRequestMessage();
            inValue.Slide = Slide;
            Inspire.Server.Proxy.SlideServiceReference.AddSlideResponseMessage retVal = ((Inspire.Server.Proxy.SlideServiceReference.SlideManagerServiceContract)(this)).AddSlide(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Server.Proxy.SlideServiceReference.UpdateSlideResponseMessage Inspire.Server.Proxy.SlideServiceReference.SlideManagerServiceContract.UpdateSlide(Inspire.Server.Proxy.SlideServiceReference.UpdateSlideRequestMessage request) {
            return base.Channel.UpdateSlide(request);
        }
        
        public void UpdateSlide(Inspire.Server.Proxy.SlideServiceReference.Slide Slide) {
            Inspire.Server.Proxy.SlideServiceReference.UpdateSlideRequestMessage inValue = new Inspire.Server.Proxy.SlideServiceReference.UpdateSlideRequestMessage();
            inValue.Slide = Slide;
            Inspire.Server.Proxy.SlideServiceReference.UpdateSlideResponseMessage retVal = ((Inspire.Server.Proxy.SlideServiceReference.SlideManagerServiceContract)(this)).UpdateSlide(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Server.Proxy.SlideServiceReference.DeleteSlideResponseMessage Inspire.Server.Proxy.SlideServiceReference.SlideManagerServiceContract.DeleteSlide(Inspire.Server.Proxy.SlideServiceReference.DeleteSlideRequestMessage request) {
            return base.Channel.DeleteSlide(request);
        }
        
        public void DeleteSlide(string SlideID) {
            Inspire.Server.Proxy.SlideServiceReference.DeleteSlideRequestMessage inValue = new Inspire.Server.Proxy.SlideServiceReference.DeleteSlideRequestMessage();
            inValue.SlideID = SlideID;
            Inspire.Server.Proxy.SlideServiceReference.DeleteSlideResponseMessage retVal = ((Inspire.Server.Proxy.SlideServiceReference.SlideManagerServiceContract)(this)).DeleteSlide(inValue);
        }
    }
}
