//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inspire.Server.Proxy.DisplaysServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Displays", Namespace="http://schemas.inspiredisplays.com/DataContract.Model/", ItemName="Displays")]
    [System.SerializableAttribute()]
    public class Displays : System.Collections.Generic.List<Inspire.Server.Proxy.DisplaysServiceReference.Display> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Display", Namespace="http://schemas.inspiredisplays.com/DataContract.Model/")]
    [System.SerializableAttribute()]
    public partial class Display : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VResolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HResolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ControllerTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ControllerModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonitorModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonitorTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SoftwareVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActiveFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SchedulesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrientationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPlayerCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonitorSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastCommunicationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GUIDField, value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string HostName {
            get {
                return this.HostNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostNameField, value) != true)) {
                    this.HostNameField = value;
                    this.RaisePropertyChanged("HostName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public double VResolution {
            get {
                return this.VResolutionField;
            }
            set {
                if ((this.VResolutionField.Equals(value) != true)) {
                    this.VResolutionField = value;
                    this.RaisePropertyChanged("VResolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public double HResolution {
            get {
                return this.HResolutionField;
            }
            set {
                if ((this.HResolutionField.Equals(value) != true)) {
                    this.HResolutionField = value;
                    this.RaisePropertyChanged("HResolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string ControllerType {
            get {
                return this.ControllerTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ControllerTypeField, value) != true)) {
                    this.ControllerTypeField = value;
                    this.RaisePropertyChanged("ControllerType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string ControllerModel {
            get {
                return this.ControllerModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ControllerModelField, value) != true)) {
                    this.ControllerModelField = value;
                    this.RaisePropertyChanged("ControllerModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public string MonitorModel {
            get {
                return this.MonitorModelField;
            }
            set {
                if ((object.ReferenceEquals(this.MonitorModelField, value) != true)) {
                    this.MonitorModelField = value;
                    this.RaisePropertyChanged("MonitorModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public string MonitorType {
            get {
                return this.MonitorTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MonitorTypeField, value) != true)) {
                    this.MonitorTypeField = value;
                    this.RaisePropertyChanged("MonitorType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public string OS {
            get {
                return this.OSField;
            }
            set {
                if ((object.ReferenceEquals(this.OSField, value) != true)) {
                    this.OSField = value;
                    this.RaisePropertyChanged("OS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public string SoftwareVersion {
            get {
                return this.SoftwareVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.SoftwareVersionField, value) != true)) {
                    this.SoftwareVersionField = value;
                    this.RaisePropertyChanged("SoftwareVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public int ActiveFlag {
            get {
                return this.ActiveFlagField;
            }
            set {
                if ((this.ActiveFlagField.Equals(value) != true)) {
                    this.ActiveFlagField = value;
                    this.RaisePropertyChanged("ActiveFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=14)]
        public string Group {
            get {
                return this.GroupField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupField, value) != true)) {
                    this.GroupField = value;
                    this.RaisePropertyChanged("Group");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=15)]
        public string Schedules {
            get {
                return this.SchedulesField;
            }
            set {
                if ((object.ReferenceEquals(this.SchedulesField, value) != true)) {
                    this.SchedulesField = value;
                    this.RaisePropertyChanged("Schedules");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=16)]
        public string Orientation {
            get {
                return this.OrientationField;
            }
            set {
                if ((object.ReferenceEquals(this.OrientationField, value) != true)) {
                    this.OrientationField = value;
                    this.RaisePropertyChanged("Orientation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=17)]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=18)]
        public bool IsPlayerCreated {
            get {
                return this.IsPlayerCreatedField;
            }
            set {
                if ((this.IsPlayerCreatedField.Equals(value) != true)) {
                    this.IsPlayerCreatedField = value;
                    this.RaisePropertyChanged("IsPlayerCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=19)]
        public string MonitorSize {
            get {
                return this.MonitorSizeField;
            }
            set {
                if ((object.ReferenceEquals(this.MonitorSizeField, value) != true)) {
                    this.MonitorSizeField = value;
                    this.RaisePropertyChanged("MonitorSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=20)]
        public System.Nullable<System.DateTime> LastCommunication {
            get {
                return this.LastCommunicationField;
            }
            set {
                if ((this.LastCommunicationField.Equals(value) != true)) {
                    this.LastCommunicationField = value;
                    this.RaisePropertyChanged("LastCommunication");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com/DataContract.Model/")]
    [System.SerializableAttribute()]
    public partial class GeneralFaultContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDesc {
            get {
                return this.ErrorDescField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDescField, value) != true)) {
                    this.ErrorDescField = value;
                    this.RaisePropertyChanged("ErrorDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract.Model/", ConfigurationName="DisplaysServiceReference.ClientDisplayServiceContract")]
    public interface ClientDisplayServiceContract {
        
        // CODEGEN: Generating message contract since the operation GetDisplays is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/GetDisplays", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/GetDisplaysResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Server.Proxy.DisplaysServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/GetDisplaysGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com/DataContract.Model/")]
        Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysResponseMessage GetDisplays(Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation AddDisplay is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/AddDisplay", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/AddDisplayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Server.Proxy.DisplaysServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/AddDisplayGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com/DataContract.Model/")]
        Inspire.Server.Proxy.DisplaysServiceReference.AddDisplayResponseMessage AddDisplay(Inspire.Server.Proxy.DisplaysServiceReference.AddDisplayRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation UpdateDisplay is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/UpdateDisplay", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/UpdateDisplayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Server.Proxy.DisplaysServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/UpdateDisplayGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com/DataContract.Model/")]
        Inspire.Server.Proxy.DisplaysServiceReference.UpdateDisplaysResponseMessage UpdateDisplay(Inspire.Server.Proxy.DisplaysServiceReference.UpdateDisplaysRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation DeleteDisplay is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/DeleteDisplay", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/DeleteDisplayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Server.Proxy.DisplaysServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/DeleteDisplayGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com/DataContract.Model/")]
        Inspire.Server.Proxy.DisplaysServiceReference.DeleteDisplaysResponseMessage DeleteDisplay(Inspire.Server.Proxy.DisplaysServiceReference.DeleteDisplaysRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation GetSingleDisplay is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/GetSingleDisplay", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/GetSingleDisplayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Server.Proxy.DisplaysServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/GetSingleDisplayGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com/DataContract.Model/")]
        Inspire.Server.Proxy.DisplaysServiceReference.GetSingleDisplaysResponseMessage GetSingleDisplay(Inspire.Server.Proxy.DisplaysServiceReference.GetSingleDisplaysRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation GetDisplaysInSchedule is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/GetDisplaysInSchedule", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/GetDisplaysInScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Server.Proxy.DisplaysServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/GetDisplaysInScheduleGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com/DataContract.Model/")]
        Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysInScheduleResponseMessage GetDisplaysInSchedule(Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysInScheduleRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation GetAllDisplays is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/GetAllDisplays", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/GetAllDisplaysResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Server.Proxy.DisplaysServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract.Model/ClientDisplayServiceCont" +
            "ract/GetAllDisplaysGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com/DataContract.Model/")]
        Inspire.Server.Proxy.DisplaysServiceReference.GetAllDisplaysResponseMessage GetAllDisplays(Inspire.Server.Proxy.DisplaysServiceReference.GetAllDisplaysRequestMessage request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetDisplaysRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract.Model/", Order=0)]
        public string GroupID;
        
        public GetDisplaysRequestMessage() {
        }
        
        public GetDisplaysRequestMessage(string GroupID) {
            this.GroupID = GroupID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetDisplaysResponseMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredispays.com", Order=0)]
        public Inspire.Server.Proxy.DisplaysServiceReference.Displays Displays;
        
        public GetDisplaysResponseMessage() {
        }
        
        public GetDisplaysResponseMessage(Inspire.Server.Proxy.DisplaysServiceReference.Displays Displays) {
            this.Displays = Displays;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddDisplayRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredispays.com", Order=0)]
        public Inspire.Server.Proxy.DisplaysServiceReference.Display Display;
        
        public AddDisplayRequestMessage() {
        }
        
        public AddDisplayRequestMessage(Inspire.Server.Proxy.DisplaysServiceReference.Display Display) {
            this.Display = Display;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddDisplayResponseMessage {
        
        public AddDisplayResponseMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateDisplaysRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredispays.com", Order=0)]
        public Inspire.Server.Proxy.DisplaysServiceReference.Display Display;
        
        public UpdateDisplaysRequestMessage() {
        }
        
        public UpdateDisplaysRequestMessage(Inspire.Server.Proxy.DisplaysServiceReference.Display Display) {
            this.Display = Display;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateDisplaysResponseMessage {
        
        public UpdateDisplaysResponseMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteDisplaysRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredispays.com", Order=0)]
        public string GUID;
        
        public DeleteDisplaysRequestMessage() {
        }
        
        public DeleteDisplaysRequestMessage(string GUID) {
            this.GUID = GUID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteDisplaysResponseMessage {
        
        public DeleteDisplaysResponseMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetSingleDisplaysRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredispays.com", Order=0)]
        public string DisplayID;
        
        public GetSingleDisplaysRequestMessage() {
        }
        
        public GetSingleDisplaysRequestMessage(string DisplayID) {
            this.DisplayID = DisplayID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetSingleDisplaysResponseMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract.Model/", Order=0)]
        public Inspire.Server.Proxy.DisplaysServiceReference.Display Display;
        
        public GetSingleDisplaysResponseMessage() {
        }
        
        public GetSingleDisplaysResponseMessage(Inspire.Server.Proxy.DisplaysServiceReference.Display Display) {
            this.Display = Display;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetDisplaysInScheduleRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract.Model/", Order=0)]
        public string ScheduleID;
        
        public GetDisplaysInScheduleRequestMessage() {
        }
        
        public GetDisplaysInScheduleRequestMessage(string ScheduleID) {
            this.ScheduleID = ScheduleID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetDisplaysInScheduleResponseMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredispays.com", Order=0)]
        public Inspire.Server.Proxy.DisplaysServiceReference.Displays Displays;
        
        public GetDisplaysInScheduleResponseMessage() {
        }
        
        public GetDisplaysInScheduleResponseMessage(Inspire.Server.Proxy.DisplaysServiceReference.Displays Displays) {
            this.Displays = Displays;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetAllDisplaysRequestMessage {
        
        public GetAllDisplaysRequestMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetAllDisplaysResponseMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredispays.com", Order=0)]
        public Inspire.Server.Proxy.DisplaysServiceReference.Displays Displays;
        
        public GetAllDisplaysResponseMessage() {
        }
        
        public GetAllDisplaysResponseMessage(Inspire.Server.Proxy.DisplaysServiceReference.Displays Displays) {
            this.Displays = Displays;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ClientDisplayServiceContractChannel : Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientDisplayServiceContractClient : System.ServiceModel.ClientBase<Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract>, Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract {
        
        public ClientDisplayServiceContractClient() {
        }
        
        public ClientDisplayServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientDisplayServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientDisplayServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientDisplayServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysResponseMessage Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract.GetDisplays(Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysRequestMessage request) {
            return base.Channel.GetDisplays(request);
        }
        
        public Inspire.Server.Proxy.DisplaysServiceReference.Displays GetDisplays(string GroupID) {
            Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysRequestMessage inValue = new Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysRequestMessage();
            inValue.GroupID = GroupID;
            Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysResponseMessage retVal = ((Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract)(this)).GetDisplays(inValue);
            return retVal.Displays;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Server.Proxy.DisplaysServiceReference.AddDisplayResponseMessage Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract.AddDisplay(Inspire.Server.Proxy.DisplaysServiceReference.AddDisplayRequestMessage request) {
            return base.Channel.AddDisplay(request);
        }
        
        public void AddDisplay(Inspire.Server.Proxy.DisplaysServiceReference.Display Display) {
            Inspire.Server.Proxy.DisplaysServiceReference.AddDisplayRequestMessage inValue = new Inspire.Server.Proxy.DisplaysServiceReference.AddDisplayRequestMessage();
            inValue.Display = Display;
            Inspire.Server.Proxy.DisplaysServiceReference.AddDisplayResponseMessage retVal = ((Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract)(this)).AddDisplay(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Server.Proxy.DisplaysServiceReference.UpdateDisplaysResponseMessage Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract.UpdateDisplay(Inspire.Server.Proxy.DisplaysServiceReference.UpdateDisplaysRequestMessage request) {
            return base.Channel.UpdateDisplay(request);
        }
        
        public void UpdateDisplay(Inspire.Server.Proxy.DisplaysServiceReference.Display Display) {
            Inspire.Server.Proxy.DisplaysServiceReference.UpdateDisplaysRequestMessage inValue = new Inspire.Server.Proxy.DisplaysServiceReference.UpdateDisplaysRequestMessage();
            inValue.Display = Display;
            Inspire.Server.Proxy.DisplaysServiceReference.UpdateDisplaysResponseMessage retVal = ((Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract)(this)).UpdateDisplay(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Server.Proxy.DisplaysServiceReference.DeleteDisplaysResponseMessage Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract.DeleteDisplay(Inspire.Server.Proxy.DisplaysServiceReference.DeleteDisplaysRequestMessage request) {
            return base.Channel.DeleteDisplay(request);
        }
        
        public void DeleteDisplay(string GUID) {
            Inspire.Server.Proxy.DisplaysServiceReference.DeleteDisplaysRequestMessage inValue = new Inspire.Server.Proxy.DisplaysServiceReference.DeleteDisplaysRequestMessage();
            inValue.GUID = GUID;
            Inspire.Server.Proxy.DisplaysServiceReference.DeleteDisplaysResponseMessage retVal = ((Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract)(this)).DeleteDisplay(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Server.Proxy.DisplaysServiceReference.GetSingleDisplaysResponseMessage Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract.GetSingleDisplay(Inspire.Server.Proxy.DisplaysServiceReference.GetSingleDisplaysRequestMessage request) {
            return base.Channel.GetSingleDisplay(request);
        }
        
        public Inspire.Server.Proxy.DisplaysServiceReference.Display GetSingleDisplay(string DisplayID) {
            Inspire.Server.Proxy.DisplaysServiceReference.GetSingleDisplaysRequestMessage inValue = new Inspire.Server.Proxy.DisplaysServiceReference.GetSingleDisplaysRequestMessage();
            inValue.DisplayID = DisplayID;
            Inspire.Server.Proxy.DisplaysServiceReference.GetSingleDisplaysResponseMessage retVal = ((Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract)(this)).GetSingleDisplay(inValue);
            return retVal.Display;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysInScheduleResponseMessage Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract.GetDisplaysInSchedule(Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysInScheduleRequestMessage request) {
            return base.Channel.GetDisplaysInSchedule(request);
        }
        
        public Inspire.Server.Proxy.DisplaysServiceReference.Displays GetDisplaysInSchedule(string ScheduleID) {
            Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysInScheduleRequestMessage inValue = new Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysInScheduleRequestMessage();
            inValue.ScheduleID = ScheduleID;
            Inspire.Server.Proxy.DisplaysServiceReference.GetDisplaysInScheduleResponseMessage retVal = ((Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract)(this)).GetDisplaysInSchedule(inValue);
            return retVal.Displays;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Server.Proxy.DisplaysServiceReference.GetAllDisplaysResponseMessage Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract.GetAllDisplays(Inspire.Server.Proxy.DisplaysServiceReference.GetAllDisplaysRequestMessage request) {
            return base.Channel.GetAllDisplays(request);
        }
        
        public Inspire.Server.Proxy.DisplaysServiceReference.Displays GetAllDisplays() {
            Inspire.Server.Proxy.DisplaysServiceReference.GetAllDisplaysRequestMessage inValue = new Inspire.Server.Proxy.DisplaysServiceReference.GetAllDisplaysRequestMessage();
            Inspire.Server.Proxy.DisplaysServiceReference.GetAllDisplaysResponseMessage retVal = ((Inspire.Server.Proxy.DisplaysServiceReference.ClientDisplayServiceContract)(this)).GetAllDisplays(inValue);
            return retVal.Displays;
        }
    }
}
