<UserControl x:Class="Inspire.Client.ScheduleWindow.ScheduleInfo"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Commands="clr-namespace:Inspire.Commands;assembly=Inspire"
    xmlns:Inspire="clr-namespace:Inspire;assembly=Inspire"
    xmlns:WpfEditors="clr-namespace:DevComponents.WpfEditors;assembly=DevComponents.WpfEditors"
    xmlns:Primitives="clr-namespace:DevComponents.WpfEditors.Primitives;assembly=DevComponents.WpfEditors" xmlns:DragDropListBox="clr-namespace:Inspire.Common.DragDropListBox;assembly=Inspire.Common" xmlns:Converters="clr-namespace:Inspire.Client.ScheduleWindow.Converters" VerticalAlignment="Stretch">

    <UserControl.Resources>

        <Inspire:DurationConverter x:Key="durationConverter" />
        <Inspire:BoolToVisibleConverter x:Key="boolToVisibilityConverter" />
        <Converters:NoButtonWarningConverter x:Key="noButtonWarningConverter" />
        <Converters:RulesToMultiTextConverter x:Key="rulesToMultiTextConverter"/>
        <Converters:RulesToTextConverter x:Key="rulesToTextConverter" />
        
        <ToolTip x:Key="toolTipTextBoxBinding"
         DataContext="{Binding Path=PlacementTarget,
           RelativeSource={x:Static RelativeSource.Self}}">
            <TextBlock Text="{Binding Path=Text}"/>
        </ToolTip>

        <ContextMenu x:Key="ScheduledSlideContext" Background="Black">
            <MenuItem Header="Remove Slide" Click="DeleteSlide" Background="Black">
                <MenuItem.Icon>
                    <Image Source="ScheduledSlidePanel/Images/Remove.png"
               Width="16"
               Height="16" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>

            <ControlTemplate x:Key="DateTimeInputControlTemplate1" TargetType="{x:Type WpfEditors:DateTimeInput}">
            <Border Background="{StaticResource SunkenBackground}" BorderBrush="{StaticResource ListBorder}" BorderThickness="1" Padding="1,1,1,1">
                <Primitives:DateTimeGroup x:Name="PART_InputGroup" IsEmpty="True" IsUserInput="False" FocusedItem="{x:Null}"/>
            </Border>
        </ControlTemplate>

        <Style x:Key="LBStyle" TargetType="{x:Type ListBox}">
            
            <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBox}">
                        <Grid>
                        <Border x:Name="Bd" Background="{StaticResource SunkenBackground}" CornerRadius="4" />
                            <Border x:Name="Hl" BorderBrush="{StaticResource Highlight}" BorderThickness="0,0,0,1" CornerRadius="4" />
                            <Border x:Name="Sh" BorderBrush="{StaticResource Shadow}" BorderThickness="0,1,0,0" CornerRadius="4" />
                            <ScrollViewer Margin="0,2,0,0" Focusable="false" Padding="{TemplateBinding Padding}">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TouchLinksStyle" TargetType="{x:Type Border}">
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Text, ElementName=cbSchedType}" Value="Touchscreen">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <ContextMenu x:Key="DisplayMenu" Background="#FF000000">
            <MenuItem Header="Remove Display" Click="RemoveDisplay" Background="#FF000000">
                <MenuItem.Icon>
                    <Image Source="Resources/Images/Remove.png"
               Width="16"
               Height="16" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>

        <Style x:Key="HideTouchButton" TargetType="{x:Type Button}">
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Foreground" >
                <Setter.Value>
                    <SolidColorBrush Color="{StaticResource MainColor}"/>
                </Setter.Value>
            </Setter>
            <Setter Property="FontSize" Value="14" />

            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="VerticalAlignment" Value="Center" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="HoverOn">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverLayer" Storyboard.TargetProperty="(UIElement.Opacity)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Grid" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="-4" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="HoverOff">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverLayer" Storyboard.TargetProperty="(UIElement.Opacity)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Grid" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="-2" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="PressedOn">
                                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BottomWhite" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                    <SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="#7FFFFFFF" />
                                </ColorAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Grid" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="2" />
                                </DoubleAnimationUsingKeyFrames>
                                <ThicknessAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Shadow" Storyboard.TargetProperty="(FrameworkElement.Margin)">
                                    <SplineThicknessKeyFrame KeyTime="00:00:00.1000000" Value="0,2,0,0" />
                                </ThicknessAnimationUsingKeyFrames>
                                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TopWhite" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                    <SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="#19FDFDFD" />
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="PressedOff">
                                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BottomWhite" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                    <SplineColorKeyFrame KeyTime="00:00:00.3000000" Value="#19FFFFFF" />
                                </ColorAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Grid" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="-2" />
                                </DoubleAnimationUsingKeyFrames>
                                <ThicknessAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Shadow" Storyboard.TargetProperty="(FrameworkElement.Margin)">
                                    <SplineThicknessKeyFrame KeyTime="00:00:00.3000000" Value="0,2,0,-2" />
                                </ThicknessAnimationUsingKeyFrames>
                                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TopWhite" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                    <SplineColorKeyFrame KeyTime="00:00:00.3000000" Value="#99FDFDFD" />
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <Grid x:Name="Grid" RenderTransformOrigin="0.5,0.5" Margin="4,4,4,4">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1" />
                                    <SkewTransform AngleX="0" AngleY="0" />
                                    <RotateTransform Angle="0" />
                                    <TranslateTransform X="0" Y="-2" />
                                </TransformGroup>
                            </Grid.RenderTransform>

                            <Border CornerRadius="4,4,4,4" x:Name="Shadow" Opacity="0.5" Margin="0,2,0,-2" Effect="{StaticResource EffectBlur}">
                                <Border.Background>
                                    <SolidColorBrush Color="{StaticResource BlackColor}" />
                                </Border.Background>
                            </Border>

                            <Border CornerRadius="4,4,4,4" x:Name="BaseLayer">
                                <Border.Background>
                                    <SolidColorBrush Color="{StaticResource ControlColor}" />
                                </Border.Background>
                            </Border>
                            <Border CornerRadius="4,4,4,4" x:Name="EdgeCurveLayer">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0.994,0.5" StartPoint="0.01,0.5">
                                        <GradientStop Color="#00000000" Offset="0" />
                                        <GradientStop Color="#00000000" Offset="1" />
                                        <GradientStop Color="#19000000" Offset="0.203" />
                                        <GradientStop Color="#19000000" Offset="0.81" />
                                        <GradientStop Color="#33000000" Offset="0.5" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <Border CornerRadius="4,4,4,4" x:Name="BottomWhite">
                                <Border.OpacityMask>
                                    <LinearGradientBrush EndPoint="0.995,0.5" StartPoint="0.01,0.5">
                                        <GradientStop Color="#00000000" Offset="0" />
                                        <GradientStop Color="#00000000" Offset="1" />
                                        <GradientStop Color="#FF000000" Offset="0.548" />
                                    </LinearGradientBrush>
                                </Border.OpacityMask>
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0.5,0.971" StartPoint="0.5,0.036">
                                        <GradientStop Color="#00000000" Offset="0" />
                                        <GradientStop Color="#19FFFFFF" Offset="1" />
                                        <GradientStop Color="#0C808080" Offset="0.49" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <Border CornerRadius="4,4,4,4" x:Name="TopWhite">
                                <Border.OpacityMask>
                                    <LinearGradientBrush EndPoint="0.991,0.5" StartPoint="0.01,0.5">
                                        <GradientStop Color="#00000000" Offset="0" />
                                        <GradientStop Color="#00060606" Offset="1" />
                                        <GradientStop Color="#D8020202" Offset="0.49" />
                                    </LinearGradientBrush>
                                </Border.OpacityMask>
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0.5,0.971" StartPoint="0.5,0.029">
                                        <GradientStop Color="#99FDFDFD" Offset="0" />
                                        <GradientStop Color="#00FFFFFF" Offset="1" />
                                        <GradientStop Color="#4CFDFDFD" Offset="0.513" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <Border CornerRadius="4,4,4,4" x:Name="HoverLayer" Opacity="0" BorderThickness="1,1,1,1" Background="{x:Null}">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{StaticResource MainColor}" />
                                </Border.BorderBrush>
                                <Border CornerRadius="3,3,3,3" BorderThickness="1,1,1,1" x:Name="HoverInner">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{StaticResource MainColor}" />
                                    </Border.BorderBrush>
                                </Border>
                            </Border>
                            <Border x:Name="DefaultLayer" BorderThickness="1,1,1,1" CornerRadius="4,4,4,4" Opacity="0">
                                <Border.Effect>
                                    <DropShadowEffect Color="{StaticResource MainColor}" Opacity="0.65" BlurRadius="10" />
                                </Border.Effect>
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{StaticResource MainColor}" />
                                </Border.BorderBrush>
                            </Border>

                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" Margin="4,-2,4,2" x:Name="contentPresenter">
                                <ContentPresenter.Effect>
                                    <DropShadowEffect  Color="{StaticResource MainColor}" Opacity="0" />
                                </ContentPresenter.Effect>
                            </ContentPresenter>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true" />
                            <Trigger Property="IsMouseOver" Value="true">
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard" />
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource HoverOn}" x:Name="HoverOn_BeginStoryboard" />
                                </Trigger.EnterActions>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard" />
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard" />
                                </Trigger.EnterActions>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="true" />
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Text, ElementName=cbSchedType}" Value="Touchscreen">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="HidePanel" TargetType="{x:Type StackPanel}">
            <Setter Property="Visibility" Value="Visible"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="8">
                    <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="SleepHidePanel" TargetType="{x:Type StackPanel}">
            <Setter Property="Visibility" Value="Visible"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="8">
                    <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="9">
                    <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="NoMixBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="Blue"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbPlaybackMode}" Value="1">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="NormalModeBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="Blue"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbPlaybackMode}" Value="0">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="RandomizeBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="Blue"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbPlaybackMode}" Value="2">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="IntersperseBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="Blue"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbPlaybackMode}" Value="3">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="ContinuousBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="SeaGreen"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="0">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="DefaultBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="Blue"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="8">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="DailyBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="SeaGreen"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="1">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="WeekDayBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="SeaGreen"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="2">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="WeeklyBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="SeaGreen"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="5">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="MonWedFriBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="SeaGreen"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="3">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="TuesThursBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="SeaGreen"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="4">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="MonthlyBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="SeaGreen"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="6">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="YearlyBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="SeaGreen"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="7">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="SleepBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="Black"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="9">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="DisplayLabel" TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Items.Count, ElementName=lvDisplays}" Value="0">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <!--<Style x:Key="TriggeredBrush" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="Orange"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="10">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>-->
        
        <Style x:Key="WeekCheckBox" TargetType="{x:Type CheckBox}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckBoxFocusVisual}" />
            <Setter Property="Background" Value="{StaticResource NormalBrush}" />
            <Setter Property="BorderBrush" Value="{StaticResource NormalBorderBrush}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="HoverOn">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.8" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="HoverOff">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="PressedOn" />
                            <Storyboard x:Key="PressedOff" />
                            <Storyboard x:Key="CheckedOn">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path" Storyboard.TargetProperty="(FrameworkElement.Width)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="11" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path" Storyboard.TargetProperty="(FrameworkElement.Height)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="10" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="CheckedOff">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path" Storyboard.TargetProperty="(FrameworkElement.Width)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path" Storyboard.TargetProperty="(FrameworkElement.Height)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="ThreeStateOn">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState" Storyboard.TargetProperty="(FrameworkElement.Width)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="9" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState" Storyboard.TargetProperty="(FrameworkElement.Height)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="9" />
                                </DoubleAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Hidden}" />
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="ThreeStateOff">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState" Storyboard.TargetProperty="(FrameworkElement.Width)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState" Storyboard.TargetProperty="(FrameworkElement.Height)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="00:00:00.3000000" Value="{x:Static Visibility.Visible}" />
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Grid Width="13" Height="13">
                                    <Border x:Name="Shadow" Margin="0,0,-2,-2" Opacity="0.25" Effect="{StaticResource EffectBlur}">
                                        <Border.Background>
                                            <SolidColorBrush Color="{StaticResource BlackColor}" />
                                        </Border.Background>
                                    </Border>
                                    <Border x:Name="MainBorder" BorderThickness="2,2,2,2" CornerRadius="2,2,2,2" BorderBrush="#72000000">
                                        <Border.Background>
                                            <SolidColorBrush Color="{StaticResource ControlColor}" />
                                        </Border.Background>
                                        <Rectangle Visibility="Visible" Fill="{StaticResource GlyphBrush}" x:Name="ThreeState" Margin="1,1,1,1" Width="0" Height="0" />
                                    </Border>
                                    <Border x:Name="Shade" CornerRadius="2,2,2,2" Opacity="0.1" Margin="1,1,1,1">
                                        <Border.Background>
                                            <LinearGradientBrush EndPoint="1.292,0.5" StartPoint="-0.545,0.5">
                                                <GradientStop Color="#FF000000" Offset="1" />
                                                <GradientStop Color="#FFFFFFFF" Offset="0.006" />
                                            </LinearGradientBrush>
                                        </Border.Background>
                                    </Border>
                                    <Path Stretch="Fill" Stroke="{StaticResource GlyphBrush}" StrokeThickness="2" x:Name="path" Width="11" Data="M1.0924787,5.372821 L3.1785986,10.519821 10.528543,2.5198207" Margin="1.577,0.134,-0.013,2.866" Height="10" />
                                    <Border Opacity="0" x:Name="Hover" BorderThickness="2,2,2,2" CornerRadius="2,2,2,2">
                                        <Border.BorderBrush>
                                            <SolidColorBrush Color="{StaticResource MainColor}" />
                                        </Border.BorderBrush>
                                    </Border>
                                </Grid>
                            </BulletDecorator.Bullet>
                            <ContentPresenter RecognizesAccessKey="True" Margin="5,0,0,0" x:Name="contentPresenter">
                                <ContentPresenter.Effect>
                                    <DropShadowEffect Color="{StaticResource MainColor}" Opacity="0" />
                                </ContentPresenter.Effect>
                            </ContentPresenter>
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource ThreeStateOff}" x:Name="ThreeStateOff_BeginStoryboard" />
                                </MultiTrigger.ExitActions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource ThreeStateOn}" x:Name="ThreeStateOn_BeginStoryboard" />
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsThreeState" Value="True" />
                                    <Condition Property="IsChecked" Value="True" />
                                </MultiTrigger.Conditions>

                            </MultiTrigger>

                            <Trigger Property="IsChecked" Value="false">
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource CheckedOn}" x:Name="CheckedOn_BeginStoryboard" />
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource CheckedOff}" x:Name="CheckedOff_BeginStoryboard" />
                                </Trigger.EnterActions>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Trigger.ExitActions>
                                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                                </Trigger.EnterActions>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Trigger.ExitActions>
                                    <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
                                </Trigger.EnterActions>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="{StaticResource DisabledBackgroundBrush}" TargetName="MainBorder" />
                                <Setter Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" TargetName="MainBorder" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Foreground">
                <Setter.Value>
                    <SolidColorBrush Color="White" />
                </Setter.Value>
            </Setter>
            <Setter Property="Visibility" Value="Collapsed"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="5">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="TimeControls" TargetType="{x:Type WpfEditors:DateTimeInput}">
            <Setter Property="UIElement.Visibility" Value="Visible"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsChecked, ElementName=cbAllDay}" Value="True">
                    <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=IsChecked, ElementName=cbAllDay}" Value="False">
                    <Setter Property="UIElement.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <DataTemplate x:Key="SlideTemplate">
            <Border MinWidth="500" BorderBrush="Gray" BorderThickness="1" HorizontalAlignment="Stretch" Width="{Binding ElementName=lbSlideInfoSlides, Path=ActualWidth}">
                <Grid>
                    <Grid HorizontalAlignment="Left" Margin="5" MaxWidth="45" MaxHeight="35">
                        <Image HorizontalAlignment="Center" Source="{Binding ThumbNail}" />
                    </Grid>
                    <TextBlock Foreground="{StaticResource Foreground}" Text="{Binding Name}" FontSize="14" Margin="75,0,0,0"/>
                    <TextBlock Foreground="{StaticResource Foreground}" Text="{Binding Description}" HorizontalAlignment="Left" MaxWidth="345" MaxHeight="25" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" Margin="80,20,0,10"/>
                    <TextBlock Foreground="{StaticResource Foreground}" Text="{Binding Duration, Converter={StaticResource durationConverter}, Mode=OneWay}" FontSize="20" Margin="0,0,20,0" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                </Grid>
            </Border>
        </DataTemplate>

        <ControlTemplate x:Key="SlideDataTemplate">
            <Border BorderBrush="Gray" BorderThickness="1" HorizontalAlignment="Stretch" Background="#01000000" PreviewMouseLeftButtonDown="SelectedTemplate_PreviewMouseDown">
                <Grid>
                    <Grid HorizontalAlignment="Left" Margin="5" MaxWidth="45" MaxHeight="35">
                    <Image HorizontalAlignment="Center" Source="{Binding ThumbNail}" />
                    </Grid>
                    <TextBlock Text="{Binding Name}" FontSize="14" FontWeight="Bold" Margin="75,0,0,0"/>
                    <TextBlock Text="{Binding Description}" FontSize="13" Foreground="{StaticResource TextBrush}" HorizontalAlignment="Left" MaxWidth="345" MaxHeight="25" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" Margin="80,20,0,10"/>
                    <TextBlock Text="{Binding Duration, Converter={StaticResource durationConverter}, Mode=OneWay}" FontSize="20" Margin="0,0,24,0" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                    <Border Style="{StaticResource TouchLinksStyle}" Width="20" Height="20" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,2,0">
                        <Image Source="Resources/Images/warning.png"  ToolTip="Slide contains buttons that are not linked." Visibility="{Binding Buttons, Converter={StaticResource noButtonWarningConverter}}" />
                    </Border>
                </Grid>
            </Border>
        </ControlTemplate>

        <ControlTemplate x:Key="SelectedSlideDataTemplate">
            <Border BorderBrush="Gray" BorderThickness="1" HorizontalAlignment="Stretch" ContextMenu="{StaticResource ScheduledSlideContext}" Background="#01000000" PreviewMouseLeftButtonDown="SelectedTemplate_PreviewMouseDown">
                <Grid>
                    <Image HorizontalAlignment="Left" Margin="5" MaxWidth="127" Height="120" Source="{Binding ThumbNail}" />
                    <TextBlock Text="{Binding Name}" MaxWidth="280" TextTrimming="CharacterEllipsis" TextAlignment="Left" FontSize="16" FontWeight="Bold" Margin="140,0,0,0" HorizontalAlignment="Left"/>
                    <TextBlock Text="{Binding Description}" FontSize="13" Foreground="{StaticResource TextBrush}" HorizontalAlignment="Left" MaxWidth="290" MaxHeight="55" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" Margin="140,20,0,30"/>
                    <TextBlock VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="140,0,0,3" Text="{Binding Rules, Mode=OneWay, Converter={StaticResource rulesToTextConverter}}" ToolTip="{Binding Rules, Mode=OneWay, Converter={StaticResource rulesToMultiTextConverter}}" />
                    <WpfEditors:DateTimeInput Value="{Binding Duration}" Foreground="Black" FontSize="24" Margin="0,10,10,0" HorizontalAlignment="Right" ToolTip="Duration" x:Name="dtiDuration" VerticalAlignment="Top" Format="Custom" CustomFormat="HH:mm:ss" ShowDropDown="False" AllowEmptyState="False"/>
                    <!--<TextBlock Text="{Binding Duration, Converter={StaticResource durationConverter}, Mode=OneWay}" ToolTip="Duration" VerticalAlignment="Top" FontSize="24" Margin="0,10,10,0" HorizontalAlignment="Right"/>-->
                    <Button Content="Transition" ToolTip="{Binding Transition}" Width="90" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,8,44" Command="{x:Static Commands:InspireCommands.ConfigureTransitionCommand}" />
                    <Button IsEnabled="{Binding HasTouchElements}" Style="{StaticResource HideTouchButton}" Content="Buttons" ToolTip="Configure touchscreen buttons." Width="90" Height="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="8" Command="{x:Static Commands:InspireCommands.ConfigureTouchscreenButtons}"/>
                    <Border Style="{StaticResource TouchLinksStyle}" Width="20" Height="20" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,98,14">
                    <Image Source="Resources/Images/warning.png" ToolTip="Slide contains buttons that are not linked." Visibility="{Binding Buttons, Converter={StaticResource noButtonWarningConverter}}"  />
                    </Border>
                </Grid>
            </Border>
        </ControlTemplate>

        <DataTemplate x:Key="SlideTemplateUsingTriggers">
            <Control x:Name="theControl" Focusable="False" Template="{StaticResource SlideDataTemplate}" />
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True">
                    <Setter TargetName="theControl" Property="Template" Value="{StaticResource SelectedSlideDataTemplate}" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>
    </UserControl.Resources>
    <DockPanel>
        <ScrollViewer Height="285" DockPanel.Dock="Top" VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Auto">
        <Grid>
            <Inspire:InfoTextBox x:Name="txtSchedName" Foreground="White" TextBoxInfo="Enter the Name of the Schedule" VerticalContentAlignment="Center" Height="25" Margin="108,15,157,0" VerticalAlignment="Top" />
            <Label Height="25" HorizontalAlignment="Left" Margin="9,19,0,0" Foreground="White" FontWeight="Bold"  Name="lblSchedName" VerticalAlignment="Top" Width="104">Schedule Name:</Label>
            <Label Height="25" HorizontalAlignment="Left" Margin="15,54,0,0" Foreground="White" FontWeight="Bold"  Name="lblSchedType" VerticalContentAlignment="Center" VerticalAlignment="Top" Width="109">Schedule Type:</Label>

            <StackPanel Style="{StaticResource HidePanel}" Orientation="Horizontal" Height="25" Margin="14,86,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Width="554">
                <Label Grid.Row="1" Foreground="White" FontWeight="Bold"  Name="lblWhen" Margin="5,0,5,0" VerticalAlignment="Center">When:</Label>
                <WpfEditors:DateTimeInput Template="{StaticResource DateTimeInputControlTemplate1}" Grid.Column="1" Grid.Row="1" x:Name="dpStart" Format="Short" BorderBrush="Gray" Margin="0,0,5,0" Height="25" Width="110"></WpfEditors:DateTimeInput>
                <WpfEditors:DateTimeInput Template="{StaticResource DateTimeInputControlTemplate1}" Style="{StaticResource TimeControls}" Grid.Column="2" Grid.Row="1" x:Name="tpStart" Format="ShortTime"  ShowDropDown="False" Height="25" VerticalAlignment="Top" HorizontalAlignment="Left" Width="80"></WpfEditors:DateTimeInput>
                <Label Grid.Column="3" Grid.Row="1" Name="lblto" Foreground="White" FontWeight="Bold" Margin="5,0,5,0" VerticalAlignment="Center">to</Label>
                <WpfEditors:DateTimeInput Template="{StaticResource DateTimeInputControlTemplate1}" Style="{StaticResource TimeControls}" Grid.Column="4" Grid.Row="1" x:Name="tpEnd" Format="ShortTime" ShowDropDown="False" Margin="0,0,5,0" Height="25" Width="80"></WpfEditors:DateTimeInput>
                <WpfEditors:DateTimeInput Template="{StaticResource DateTimeInputControlTemplate1}" Grid.Column="5" Grid.Row="1" x:Name="dpEnd" BorderBrush="Gray" Margin="0,0,5,0" Height="25" Width="110"></WpfEditors:DateTimeInput>
                <CheckBox Grid.Column="6" Grid.Row="1" Height="25" x:Name="cbAllDay" ToolTip="Play All Day" VerticalAlignment="Center" Foreground="White" Width="91">All Day</CheckBox>
            </StackPanel>


            <ListBox Style="{StaticResource LBStyle}" Margin="6,161,6,40" x:Name="lvDisplays" AllowDrop="True" DragOver="lvDisplays_DragOver" Drop="lvDisplays_Drop" Height="84" VerticalAlignment="Top">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" ContextMenu="{StaticResource DisplayMenu}">
                            <Image Width="24" Height="24" Margin="3,0" Source="ScheduleTreeView\Resources\Images\Display.ico" />
                            <TextBlock Text="{Binding DisplayName}" />
                        </StackPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Height="140" Orientation="Vertical" IsItemsHost="True" />
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
            </ListBox>
            <Label Height="29" Margin="149,191,158,0" Name="lblDragDisplays" HorizontalAlignment="Center" VerticalAlignment="Top" Style="{StaticResource DisplayLabel}" IsHitTestVisible="False" FontStyle="Italic" Opacity=".8" Foreground="White" Width="283">Drag Displays Here To Create A Schedule For Them</Label>
            <Label HorizontalAlignment="Left" Margin="10,142,0,0" Name="lblDisplays" Foreground="White" FontWeight="Bold" Width="67" Height="23" VerticalAlignment="Top">Displays:</Label>
            <Button Height="31" Margin="0,0,146,3" Inspire:ButtonImage.Image="Resources/Images/Ok16.png" Name="btnSave" VerticalAlignment="Bottom" Width="128" Command="{x:Static Commands:InspireCommands.SaveScheduleCommand}" HorizontalAlignment="Right">Save</Button>
            <Button Height="31" Margin="0,0,146,3" Inspire:ButtonImage.Image="Resources/Images/Ok16.png" Name="btnUpdate" VerticalAlignment="Bottom"  Width="128" Command="{x:Static Commands:InspireCommands.UpdateScheduleCommand}" Visibility="Collapsed" HorizontalAlignment="Right">Update</Button>
            <Button Height="31" HorizontalAlignment="Right" Margin="0,0,10,3" Inspire:ButtonImage.Image="Resources/Images/Cancel16.png" Name="btnCancel" VerticalAlignment="Bottom" Width="128" Command="{x:Static Commands:InspireCommands.CancelScheduleCommand}">Cancel</Button>
            <!--<TextBlock MaxWidth="540" HorizontalAlignment="Left" Height="48" Margin="17,83,59,0" Style="{StaticResource ContinuousBrush}" FontWeight="Bold" x:Name="lblContinuous" VerticalAlignment="Top" TextWrapping="Wrap">Continuous schedules play non-stop from the start time on the start date until the end time on the end date.</TextBlock>
            <TextBlock MaxWidth="540" HorizontalAlignment="Left" Height="48" Margin="17,83,59,0" Style="{StaticResource DefaultBrush}" FontWeight="Bold" Name="lblDefault" VerticalAlignment="Top" TextWrapping="Wrap">The Default presentation will play on the display when no other schedule is playing.</TextBlock>
            <TextBlock MaxWidth="540" HorizontalAlignment="Left" Height="48" Margin="17,83,59,0" Style="{StaticResource DailyBrush}" FontWeight="Bold" Name="lblDaily" VerticalAlignment="Top" TextWrapping="Wrap">Daily will play the schedule every day choosen from the Start Time each day until the end time.</TextBlock>
            <TextBlock MaxWidth="540" HorizontalAlignment="Left" Height="48" Margin="17,83,59,0" Style="{StaticResource WeekDayBrush}" FontWeight="Bold" Name="lblWeekDay" VerticalAlignment="Top" TextWrapping="Wrap">Every weekday will play the schedule every day of the week from the start time each day until the end time.</TextBlock>
            <TextBlock MaxWidth="540" HorizontalAlignment="Left" Height="48" Margin="17,83,59,0" Style="{StaticResource MonWedFriBrush}" FontWeight="Bold" Name="lblMonWedFri" VerticalAlignment="Top" TextWrapping="Wrap">Mon, Wed, Frid, will play the schedule on Monday, Wednesday and Friday from the choosen start date to the end date from the start time each day until the end time.</TextBlock>
            <TextBlock MaxWidth="540" HorizontalAlignment="Left" Height="48" Margin="17,83,59,0" Style="{StaticResource TuesThursBrush}" FontWeight="Bold" Name="lblTuesThurs" VerticalAlignment="Top" TextWrapping="Wrap">Tues. Thurs. will play the schedule on Tues. and Thurs. from the choosen start date to the end date from the start time each day until the end time.</TextBlock>
            <TextBlock MaxWidth="540" HorizontalAlignment="Left" Height="48" Margin="17,83,59,0" Style="{StaticResource WeeklyBrush}" FontWeight="Bold" Name="lblWeekly" VerticalAlignment="Top" TextWrapping="Wrap">Weekly will play the schedule every day choosen every week from the start date to the end date from the start time each day until the end time.</TextBlock>
            <TextBlock MaxWidth="540" HorizontalAlignment="Left" Height="48" Margin="17,83,59,0" Style="{StaticResource MonthlyBrush}" FontWeight="Bold" Name="lblMonthly" VerticalAlignment="Top" TextWrapping="Wrap">Monthly will play the schedule every month on the date choosen from the start time each until the end time.</TextBlock>
            <TextBlock MaxWidth="540" HorizontalAlignment="Left" Height="48" Margin="17,83,59,0" Style="{StaticResource YearlyBrush}" FontWeight="Bold" Name="lblYearly" VerticalAlignment="Top" TextWrapping="Wrap">Yearly will play the schedule once a year on the date choosen from the start time until the end time.</TextBlock>
            <TextBlock MaxWidth="540" HorizontalAlignment="Left" Height="48" Margin="17,83,59,0" Style="{StaticResource SleepBrush}" FontWeight="Bold" Name="lblSleep" VerticalAlignment="Top" TextWrapping="Wrap">Sleep mode will put the display on a standby mode and turn the screen off to reduce power consumption and increase the life of the screen.</TextBlock>-->
            <!--<TextBlock Height="38" Margin="17,83,59,0" Style="{StaticResource TriggeredBrush}" FontWeight="Bold" Name="lblTriggered" VerticalAlignment="Top" TextWrapping="Wrap">A Triggered schedule allows you to set conditions, events or rules to determine if the schedule will play or not.</TextBlock>-->
            <ComboBox ToolTip="Hover the mouse over the item in the list to see a description of schedule type." SelectedIndex="0" Margin="109,50,0,0" Name="cbSchedType" Height="30" VerticalAlignment="Top" HorizontalAlignment="Left" Width="202">
                <ComboBoxItem ToolTip="Continuous schedules play non-stop from the start time on the start date until the end time on the end date.">Continuous</ComboBoxItem>
                <ComboBoxItem ToolTip="The Default presentation will play on the display when no other schedule is playing.">Daily</ComboBoxItem>
                <ComboBoxItem ToolTip="Every weekday will play the schedule every day of the week from the start time each day until the end time.">Every weekday (Mon-Fri)</ComboBoxItem>
                <ComboBoxItem ToolTip="Mon, Wed, Frid, will play the schedule on Monday, Wednesday and Friday from the choosen start date to the end date from the start time each day until the end time.">Every Mon., Wed., and Fri.</ComboBoxItem>
                <ComboBoxItem ToolTip="Tues. Thurs. will play the schedule on Tues. and Thurs. from the choosen start date to the end date from the start time each day until the end time.">Every Tues., and Thurs.</ComboBoxItem>
                <ComboBoxItem ToolTip="Weekly will play the schedule every day choosen every week from the start date to the end date from the start time each day until the end time.">Weekly</ComboBoxItem>
                <ComboBoxItem ToolTip="Monthly will play the schedule every month on the date choosen from the start time each until the end time.">Monthly</ComboBoxItem>
                <ComboBoxItem ToolTip="Yearly will play the schedule once a year on the date choosen from the start time until the end time.">Yearly</ComboBoxItem>
                <ComboBoxItem ToolTip="The Default presentation will play on the display when no other schedule is playing.">Default</ComboBoxItem>
                <!--<ComboBoxItem ToolTip="Sleep mode will put the display on a standby mode and turn the screen off to reduce power consumption and increase the life of the screen.">Sleep Mode</ComboBoxItem>-->
                <ComboBoxItem ToolTip="Touchscreen schedules play non-stop from the start time on the start date until the end time on the end date.">Touchscreen</ComboBoxItem>
                    <!--<ComboBoxItem ToolTip="A Triggered schedule allows you to set conditions, events or rules to determine if the schedule will play or not.">Triggered</ComboBoxItem>-->
            </ComboBox>
            <StackPanel Orientation="Horizontal" Height="20" Margin="6,116,0,0" Width="578" VerticalAlignment="Top" HorizontalAlignment="Left">
            <CheckBox Height="18" Style="{StaticResource WeekCheckBox}" HorizontalAlignment="Left" Margin="2" Name="ckbSunday" VerticalAlignment="Top" Width="65">Sunday</CheckBox>
            <CheckBox Height="18" Style="{StaticResource WeekCheckBox}" HorizontalAlignment="Left" Margin="2" Name="ckbMonday" VerticalAlignment="Top" Width="68">Monday</CheckBox>
            <CheckBox Style="{StaticResource WeekCheckBox}" HorizontalAlignment="Left" Margin="2" Name="ckbTuesday" Width="68" Height="18" VerticalAlignment="Top">Tuesday</CheckBox>
            <CheckBox Style="{StaticResource WeekCheckBox}" Margin="2" Name="ckbWednesday" Height="18" VerticalAlignment="Top" HorizontalAlignment="Left" Width="85.333">Wednesday</CheckBox>
            <CheckBox Style="{StaticResource WeekCheckBox}" Margin="2" Name="ckbThursday" Height="18" VerticalAlignment="Top" HorizontalAlignment="Left" Width="75">Thursday</CheckBox>
            <CheckBox Style="{StaticResource WeekCheckBox}" Margin="2" Name="ckbFriday" Height="18" VerticalAlignment="Top" HorizontalAlignment="Left" Width="61.333">Friday</CheckBox>
            <CheckBox Style="{StaticResource WeekCheckBox}" Margin="2" Name="ckbSaturday" Height="18" VerticalAlignment="Top">Saturday</CheckBox>
                </StackPanel>
                <TextBlock ToolTip="{StaticResource toolTipTextBoxBinding}" TextAlignment="Left" HorizontalAlignment="Left" x:Name="tbPlaybackDesc" Margin="5,247,279,0" FontSize="12" TextWrapping="Wrap" VerticalAlignment="Center" Foreground="{DynamicResource NormalBrush}" Text="Test Description" Width="306" Height="38" />
                <!--<StackPanel Style="{StaticResource SleepHidePanel}"  Margin="0,189,0,0" VerticalAlignment="Top">
                <StackPanel Orientation="Horizontal" Height="43" Margin="15,0,0,0" VerticalAlignment="Top">
                    <Border Margin="10,0,10,10" MinHeight="30" VerticalAlignment="Top" BorderThickness="1" BorderBrush="Black" MaxWidth="400" CornerRadius="10">
                        <Border.Background>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="#FFFCFAFA" Offset="0"/>
                                <GradientStop Color="#FF24E9F0" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                        <Border.Effect>
                            <DropShadowEffectBlurRadius="10"/>
                        </Border.Effect>
                        <TextBlock ToolTip="{StaticResource toolTipTextBoxBinding}" x:Name="tbPlaybackDesc" Margin="10,-1,10,-1" FontSize="14" TextWrapping="Wrap" VerticalAlignment="Center" Foreground="{Binding DarkBrush}" Text="Test Description" />
                </Border>
            </StackPanel>
                <Grid Height="54" Margin="15,0" VerticalAlignment="Top">
                    <TextBlock MaxWidth="540" HorizontalAlignment="Left" Style="{StaticResource NormalModeBrush}" FontWeight="Bold" Name="lblNormal" TextWrapping="Wrap">Normal will play the slides in the order they are layed out. Interspersed or randomized slides will mix in with them.</TextBlock>
                    <TextBlock MaxWidth="540" HorizontalAlignment="Left" Style="{StaticResource NoMixBrush}" FontWeight="Bold" Name="lblNoMix" TextWrapping="Wrap">Do not mix will keep the group of slides together on playback. Interspersed and Randomized slides will not mix with these slides.</TextBlock>
                    <TextBlock MaxWidth="540" HorizontalAlignment="Left" Style="{StaticResource RandomizeBrush}" FontWeight="Bold" Name="lblRandomize" TextWrapping="Wrap">Randomize Mode will randomly shuffle slides together with other schedules other than Do not Mix Schedules.</TextBlock>
                    <TextBlock MaxWidth="540" HorizontalAlignment="Left" Style="{StaticResource IntersperseBrush}" FontWeight="Bold" Name="lblIntersperse" TextWrapping="Wrap">Intersperse slides will distribute evenly on every other slide in other schedules that are set to Normal.</TextBlock>
                </Grid>
            </StackPanel>-->
            <Label Margin="321,55,0,0" HorizontalAlignment="Left" Foreground="White" FontWeight="Bold" Name="lblPlaybackMode" Width="96" Height="25" VerticalAlignment="Top">Playback Mode:</Label>
            <ComboBox ToolTip="Hover over the items in the list to see a description of the different playback modes." SelectedIndex="0" HorizontalAlignment="Left" Name="cbPlaybackMode" Width="166.29" Height="30" VerticalAlignment="Top" Margin="418,48,0,0">
                <ComboBoxItem ToolTip="Normal will play the slides in the order they are layed out. Interspersed or randomized slides will mix in with them.">Normal</ComboBoxItem>
                <ComboBoxItem ToolTip="Do not mix will keep the group of slides together on playback. Interspersed and Randomized slides will not mix with these slides.">Do not mix</ComboBoxItem>
                <ComboBoxItem ToolTip="Randomize Mode will randomly shuffle slides together with other schedules other than Do not Mix Schedules.">Randomize</ComboBoxItem>
                <ComboBoxItem ToolTip="Intersperse slides will distribute evenly on every other slide in other schedules that are set to Normal.">Intersperse</ComboBoxItem>
            </ComboBox>
                <CheckBox Visibility="Collapsed" Content="Touchscreen Schedule" Height="18" FontWeight="Bold" Name="cbIsTouchScreenSched" Foreground="White" Margin="0,142,6,0" Width="162" VerticalAlignment="Top" HorizontalAlignment="Right">
                    <!--<CheckBox.Triggers>
                        <DataTrigger Binding="{Binding Path=SelectedIndex, ElementName=cbSchedType}" Value="10">
                            <Setter Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                    </CheckBox.Triggers>-->
                </CheckBox>
            </Grid>
    </ScrollViewer><!---->
        <Grid AllowDrop="True" DragOver="lbSlideInfoSlides_DragOver" Drop="lbSlideInfoSlides_Drop" ><!--PreviewMouseDown="SlideGrid_PreviewMouseDown"-->
        <ListBox x:Name="lbSlideInfoSlides" Background="{DynamicResource DarkBrush}" Style="{x:Null}" AllowDrop="True" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" ItemTemplate="{StaticResource SlideTemplateUsingTriggers}" DragDropListBox:DragDropHelper.DragDropTemplate="{StaticResource SlideTemplate}"  DragDropListBox:DragDropHelper.IsDragSource="true" DragDropListBox:DragDropHelper.IsDropTarget="True"><!-- --> 
            
        </ListBox>
        <Rectangle x:Name="DropGrabber" Fill="Black" Opacity=".05" IsHitTestVisible="True" Visibility="Collapsed" />
        </Grid>
    </DockPanel>
</UserControl>
