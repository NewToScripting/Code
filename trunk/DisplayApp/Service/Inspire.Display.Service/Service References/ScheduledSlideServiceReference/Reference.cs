//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inspire.Display.Service.ScheduledSlideServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ScheduledSlides", Namespace="http://schemas.inspiredisplays.com/DataContract/", ItemName="ScheduledSlides")]
    [System.SerializableAttribute()]
    public class ScheduledSlides : System.Collections.Generic.List<Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlide> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScheduledSlide", Namespace="http://schemas.inspiredisplays.com/DataContract/")]
    [System.SerializableAttribute()]
    public partial class ScheduledSlide : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TransitionSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ThumbNailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginalSlideIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> HResolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> VResolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inspire.Display.Service.ScheduledSlideServiceReference.Buttons ButtonsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IgnoreAllRulesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GUIDField, value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Transition {
            get {
                return this.TransitionField;
            }
            set {
                if ((object.ReferenceEquals(this.TransitionField, value) != true)) {
                    this.TransitionField = value;
                    this.RaisePropertyChanged("Transition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public int TransitionSpeed {
            get {
                return this.TransitionSpeedField;
            }
            set {
                if ((this.TransitionSpeedField.Equals(value) != true)) {
                    this.TransitionSpeedField = value;
                    this.RaisePropertyChanged("TransitionSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public System.DateTime Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string ScheduleID {
            get {
                return this.ScheduleIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduleIDField, value) != true)) {
                    this.ScheduleIDField = value;
                    this.RaisePropertyChanged("ScheduleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public byte[] ThumbNail {
            get {
                return this.ThumbNailField;
            }
            set {
                if ((object.ReferenceEquals(this.ThumbNailField, value) != true)) {
                    this.ThumbNailField = value;
                    this.RaisePropertyChanged("ThumbNail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public string OriginalSlideID {
            get {
                return this.OriginalSlideIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalSlideIDField, value) != true)) {
                    this.OriginalSlideIDField = value;
                    this.RaisePropertyChanged("OriginalSlideID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public System.Nullable<double> HResolution {
            get {
                return this.HResolutionField;
            }
            set {
                if ((this.HResolutionField.Equals(value) != true)) {
                    this.HResolutionField = value;
                    this.RaisePropertyChanged("HResolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public System.Nullable<double> VResolution {
            get {
                return this.VResolutionField;
            }
            set {
                if ((this.VResolutionField.Equals(value) != true)) {
                    this.VResolutionField = value;
                    this.RaisePropertyChanged("VResolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public Inspire.Display.Service.ScheduledSlideServiceReference.Buttons Buttons {
            get {
                return this.ButtonsField;
            }
            set {
                if ((object.ReferenceEquals(this.ButtonsField, value) != true)) {
                    this.ButtonsField = value;
                    this.RaisePropertyChanged("Buttons");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public System.Nullable<bool> IgnoreAllRules {
            get {
                return this.IgnoreAllRulesField;
            }
            set {
                if ((this.IgnoreAllRulesField.Equals(value) != true)) {
                    this.IgnoreAllRulesField = value;
                    this.RaisePropertyChanged("IgnoreAllRules");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Buttons", Namespace="http://schemas.inspiredisplays.com", ItemName="Buttons")]
    [System.SerializableAttribute()]
    public class Buttons : System.Collections.Generic.List<Inspire.Display.Service.ScheduledSlideServiceReference.Button> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Button", Namespace="http://schemas.inspiredisplays.com")]
    [System.SerializableAttribute()]
    public partial class Button : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SlideIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ButtonNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduledSlideIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SlideGuidToNavigateToField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GUIDField, value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SlideID {
            get {
                return this.SlideIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SlideIDField, value) != true)) {
                    this.SlideIDField = value;
                    this.RaisePropertyChanged("SlideID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string ButtonName {
            get {
                return this.ButtonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ButtonNameField, value) != true)) {
                    this.ButtonNameField = value;
                    this.RaisePropertyChanged("ButtonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string ScheduledSlideID {
            get {
                return this.ScheduledSlideIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledSlideIDField, value) != true)) {
                    this.ScheduledSlideIDField = value;
                    this.RaisePropertyChanged("ScheduledSlideID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string SlideGuidToNavigateTo {
            get {
                return this.SlideGuidToNavigateToField;
            }
            set {
                if ((object.ReferenceEquals(this.SlideGuidToNavigateToField, value) != true)) {
                    this.SlideGuidToNavigateToField = value;
                    this.RaisePropertyChanged("SlideGuidToNavigateTo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com")]
    [System.SerializableAttribute()]
    public partial class GeneralFaultContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDescField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDesc {
            get {
                return this.ErrorDescField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDescField, value) != true)) {
                    this.ErrorDescField = value;
                    this.RaisePropertyChanged("ErrorDesc");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", ConfigurationName="ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract")]
    public interface ScheduledSlideManagerServiceContract {
        
        // CODEGEN: Generating message contract since the operation GetScheduledSlides is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/GetScheduledSlides", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/GetScheduledSlidesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Display.Service.ScheduledSlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/GetScheduledSlidesGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com")]
        Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesResponseMessage GetScheduledSlides(Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation GetScheduledSlidesNoThumb is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/GetScheduledSlidesNoThumb", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/GetScheduledSlidesNoThumbResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Display.Service.ScheduledSlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/GetScheduledSlidesNoThumbGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com")]
        Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesNoThumbResponseMessage GetScheduledSlidesNoThumb(Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesNoThumbRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation AddScheduledSlide is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/AddScheduledSlide", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/AddScheduledSlideResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Display.Service.ScheduledSlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/AddScheduledSlideGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com")]
        Inspire.Display.Service.ScheduledSlideServiceReference.AddScheduledSlideResponseMessage AddScheduledSlide(Inspire.Display.Service.ScheduledSlideServiceReference.AddScheduledSlideRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation UpdateScheduleSlides is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/UpdateScheduleSlide", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/UpdateScheduleSlidesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Display.Service.ScheduledSlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/UpdateScheduleSlidesGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com")]
        Inspire.Display.Service.ScheduledSlideServiceReference.UpdateScheduleSlidesResponseMessage UpdateScheduleSlides(Inspire.Display.Service.ScheduledSlideServiceReference.UpdateScheduleSlidesRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation DeleteScheduledSlide is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/DeleteScheduledSlide", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/DeleteScheduledSlideResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Display.Service.ScheduledSlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/DeleteScheduledSlideGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com")]
        Inspire.Display.Service.ScheduledSlideServiceReference.DeleteScheduledSlideResponseMessage DeleteScheduledSlide(Inspire.Display.Service.ScheduledSlideServiceReference.DeleteScheduledSlideRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation IsSlideScheduled is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/IsSlideScheduled", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/IsSlideScheduledResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Display.Service.ScheduledSlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/IsSlideScheduledGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com")]
        Inspire.Display.Service.ScheduledSlideServiceReference.IsSlideScheduledResponseMessage IsSlideScheduled(Inspire.Display.Service.ScheduledSlideServiceReference.IsSlideScheduledRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation UpdateOriginalSlideIds is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/UpdateOriginalSlideIds", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/UpdateOriginalSlideIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Display.Service.ScheduledSlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/UpdateOriginalSlideIdsGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com")]
        Inspire.Display.Service.ScheduledSlideServiceReference.UpdateOriginalSlideIdsResponseMessage UpdateOriginalSlideIds(Inspire.Display.Service.ScheduledSlideServiceReference.UpdateOriginalSlideIdsRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation DeleteSlideNavagation is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/SlideManagerServiceContract/DeleteSlideNavagat" +
            "ion", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/DeleteSlideNavagationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Display.Service.ScheduledSlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/DeleteSlideNavagationGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com")]
        Inspire.Display.Service.ScheduledSlideServiceReference.DeleteSlideNavagationResponseMessage DeleteSlideNavagation(Inspire.Display.Service.ScheduledSlideServiceReference.DeleteSlideNavagationRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation AddSlideNavagation is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/SlideManagerServiceContract/AddSlideNavagation" +
            "", ReplyAction="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/AddSlideNavagationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inspire.Display.Service.ScheduledSlideServiceReference.GeneralFaultContract), Action="http://schemas.inspiredisplays.com/ServiceContract/ScheduledSlideManagerServiceCo" +
            "ntract/AddSlideNavagationGeneralFaultContractFault", Name="GeneralFaultContract", Namespace="http://schemas.inspiredisplays.com")]
        Inspire.Display.Service.ScheduledSlideServiceReference.AddSlideNavagationResponseMessage AddSlideNavagation(Inspire.Display.Service.ScheduledSlideServiceReference.AddSlideNavagationRequestMessage request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetScheduledSlidesRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=0)]
        public string ScheduleID;
        
        public GetScheduledSlidesRequestMessage() {
        }
        
        public GetScheduledSlidesRequestMessage(string ScheduleID) {
            this.ScheduleID = ScheduleID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetScheduledSlidesResponseMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=0)]
        public Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlides Schedules;
        
        public GetScheduledSlidesResponseMessage() {
        }
        
        public GetScheduledSlidesResponseMessage(Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlides Schedules) {
            this.Schedules = Schedules;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetScheduledSlidesNoThumbRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=0)]
        public string ScheduleID;
        
        public GetScheduledSlidesNoThumbRequestMessage() {
        }
        
        public GetScheduledSlidesNoThumbRequestMessage(string ScheduleID) {
            this.ScheduleID = ScheduleID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetScheduledSlidesNoThumbResponseMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=0)]
        public Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlides Schedules;
        
        public GetScheduledSlidesNoThumbResponseMessage() {
        }
        
        public GetScheduledSlidesNoThumbResponseMessage(Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlides Schedules) {
            this.Schedules = Schedules;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddScheduledSlideRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=0)]
        public Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlide ScheduledSlide;
        
        public AddScheduledSlideRequestMessage() {
        }
        
        public AddScheduledSlideRequestMessage(Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlide ScheduledSlide) {
            this.ScheduledSlide = ScheduledSlide;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddScheduledSlideResponseMessage {
        
        public AddScheduledSlideResponseMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateScheduleSlidesRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=0)]
        public string ScheduledID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=1)]
        public Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlides ScheduledSlides;
        
        public UpdateScheduleSlidesRequestMessage() {
        }
        
        public UpdateScheduleSlidesRequestMessage(string ScheduledID, Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlides ScheduledSlides) {
            this.ScheduledID = ScheduledID;
            this.ScheduledSlides = ScheduledSlides;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateScheduleSlidesResponseMessage {
        
        public UpdateScheduleSlidesResponseMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteScheduledSlideRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=0)]
        public string ScheduledSlideID;
        
        public DeleteScheduledSlideRequestMessage() {
        }
        
        public DeleteScheduledSlideRequestMessage(string ScheduledSlideID) {
            this.ScheduledSlideID = ScheduledSlideID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteScheduledSlideResponseMessage {
        
        public DeleteScheduledSlideResponseMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class IsSlideScheduledRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=0)]
        public string SlideID;
        
        public IsSlideScheduledRequestMessage() {
        }
        
        public IsSlideScheduledRequestMessage(string SlideID) {
            this.SlideID = SlideID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class IsSlideScheduledResponseMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=0)]
        public bool IsSlideScheduled;
        
        public IsSlideScheduledResponseMessage() {
        }
        
        public IsSlideScheduledResponseMessage(bool IsSlideScheduled) {
            this.IsSlideScheduled = IsSlideScheduled;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateOriginalSlideIdsRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=0)]
        public bool DeleteExistingSlide;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=1)]
        public string NewSlideID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=2)]
        public string OriginalSlideID;
        
        public UpdateOriginalSlideIdsRequestMessage() {
        }
        
        public UpdateOriginalSlideIdsRequestMessage(bool DeleteExistingSlide, string NewSlideID, string OriginalSlideID) {
            this.DeleteExistingSlide = DeleteExistingSlide;
            this.NewSlideID = NewSlideID;
            this.OriginalSlideID = OriginalSlideID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateOriginalSlideIdsResponseMessage {
        
        public UpdateOriginalSlideIdsResponseMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteSlideNavagationRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/", Order=0)]
        public string ButtonID;
        
        public DeleteSlideNavagationRequestMessage() {
        }
        
        public DeleteSlideNavagationRequestMessage(string ButtonID) {
            this.ButtonID = ButtonID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteSlideNavagationResponseMessage {
        
        public DeleteSlideNavagationResponseMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddSlideNavagationRequestMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.inspiredisplays.com/ServiceContract/")]
        public Inspire.Display.Service.ScheduledSlideServiceReference.Button Button;
        
        public AddSlideNavagationRequestMessage() {
        }
        
        public AddSlideNavagationRequestMessage(Inspire.Display.Service.ScheduledSlideServiceReference.Button Button) {
            this.Button = Button;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddSlideNavagationResponseMessage {
        
        public AddSlideNavagationResponseMessage() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ScheduledSlideManagerServiceContractChannel : Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ScheduledSlideManagerServiceContractClient : System.ServiceModel.ClientBase<Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract>, Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract {
        
        public ScheduledSlideManagerServiceContractClient() {
        }
        
        public ScheduledSlideManagerServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ScheduledSlideManagerServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScheduledSlideManagerServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScheduledSlideManagerServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesResponseMessage Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract.GetScheduledSlides(Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesRequestMessage request) {
            return base.Channel.GetScheduledSlides(request);
        }
        
        public Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlides GetScheduledSlides(string ScheduleID) {
            Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesRequestMessage inValue = new Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesRequestMessage();
            inValue.ScheduleID = ScheduleID;
            Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesResponseMessage retVal = ((Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract)(this)).GetScheduledSlides(inValue);
            return retVal.Schedules;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesNoThumbResponseMessage Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract.GetScheduledSlidesNoThumb(Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesNoThumbRequestMessage request) {
            return base.Channel.GetScheduledSlidesNoThumb(request);
        }
        
        public Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlides GetScheduledSlidesNoThumb(string ScheduleID) {
            Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesNoThumbRequestMessage inValue = new Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesNoThumbRequestMessage();
            inValue.ScheduleID = ScheduleID;
            Inspire.Display.Service.ScheduledSlideServiceReference.GetScheduledSlidesNoThumbResponseMessage retVal = ((Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract)(this)).GetScheduledSlidesNoThumb(inValue);
            return retVal.Schedules;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Display.Service.ScheduledSlideServiceReference.AddScheduledSlideResponseMessage Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract.AddScheduledSlide(Inspire.Display.Service.ScheduledSlideServiceReference.AddScheduledSlideRequestMessage request) {
            return base.Channel.AddScheduledSlide(request);
        }
        
        public void AddScheduledSlide(Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlide ScheduledSlide) {
            Inspire.Display.Service.ScheduledSlideServiceReference.AddScheduledSlideRequestMessage inValue = new Inspire.Display.Service.ScheduledSlideServiceReference.AddScheduledSlideRequestMessage();
            inValue.ScheduledSlide = ScheduledSlide;
            Inspire.Display.Service.ScheduledSlideServiceReference.AddScheduledSlideResponseMessage retVal = ((Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract)(this)).AddScheduledSlide(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Display.Service.ScheduledSlideServiceReference.UpdateScheduleSlidesResponseMessage Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract.UpdateScheduleSlides(Inspire.Display.Service.ScheduledSlideServiceReference.UpdateScheduleSlidesRequestMessage request) {
            return base.Channel.UpdateScheduleSlides(request);
        }
        
        public void UpdateScheduleSlides(string ScheduledID, Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlides ScheduledSlides) {
            Inspire.Display.Service.ScheduledSlideServiceReference.UpdateScheduleSlidesRequestMessage inValue = new Inspire.Display.Service.ScheduledSlideServiceReference.UpdateScheduleSlidesRequestMessage();
            inValue.ScheduledID = ScheduledID;
            inValue.ScheduledSlides = ScheduledSlides;
            Inspire.Display.Service.ScheduledSlideServiceReference.UpdateScheduleSlidesResponseMessage retVal = ((Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract)(this)).UpdateScheduleSlides(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Display.Service.ScheduledSlideServiceReference.DeleteScheduledSlideResponseMessage Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract.DeleteScheduledSlide(Inspire.Display.Service.ScheduledSlideServiceReference.DeleteScheduledSlideRequestMessage request) {
            return base.Channel.DeleteScheduledSlide(request);
        }
        
        public void DeleteScheduledSlide(string ScheduledSlideID) {
            Inspire.Display.Service.ScheduledSlideServiceReference.DeleteScheduledSlideRequestMessage inValue = new Inspire.Display.Service.ScheduledSlideServiceReference.DeleteScheduledSlideRequestMessage();
            inValue.ScheduledSlideID = ScheduledSlideID;
            Inspire.Display.Service.ScheduledSlideServiceReference.DeleteScheduledSlideResponseMessage retVal = ((Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract)(this)).DeleteScheduledSlide(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Display.Service.ScheduledSlideServiceReference.IsSlideScheduledResponseMessage Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract.IsSlideScheduled(Inspire.Display.Service.ScheduledSlideServiceReference.IsSlideScheduledRequestMessage request) {
            return base.Channel.IsSlideScheduled(request);
        }
        
        public bool IsSlideScheduled(string SlideID) {
            Inspire.Display.Service.ScheduledSlideServiceReference.IsSlideScheduledRequestMessage inValue = new Inspire.Display.Service.ScheduledSlideServiceReference.IsSlideScheduledRequestMessage();
            inValue.SlideID = SlideID;
            Inspire.Display.Service.ScheduledSlideServiceReference.IsSlideScheduledResponseMessage retVal = ((Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract)(this)).IsSlideScheduled(inValue);
            return retVal.IsSlideScheduled;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Display.Service.ScheduledSlideServiceReference.UpdateOriginalSlideIdsResponseMessage Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract.UpdateOriginalSlideIds(Inspire.Display.Service.ScheduledSlideServiceReference.UpdateOriginalSlideIdsRequestMessage request) {
            return base.Channel.UpdateOriginalSlideIds(request);
        }
        
        public void UpdateOriginalSlideIds(bool DeleteExistingSlide, string NewSlideID, string OriginalSlideID) {
            Inspire.Display.Service.ScheduledSlideServiceReference.UpdateOriginalSlideIdsRequestMessage inValue = new Inspire.Display.Service.ScheduledSlideServiceReference.UpdateOriginalSlideIdsRequestMessage();
            inValue.DeleteExistingSlide = DeleteExistingSlide;
            inValue.NewSlideID = NewSlideID;
            inValue.OriginalSlideID = OriginalSlideID;
            Inspire.Display.Service.ScheduledSlideServiceReference.UpdateOriginalSlideIdsResponseMessage retVal = ((Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract)(this)).UpdateOriginalSlideIds(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Display.Service.ScheduledSlideServiceReference.DeleteSlideNavagationResponseMessage Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract.DeleteSlideNavagation(Inspire.Display.Service.ScheduledSlideServiceReference.DeleteSlideNavagationRequestMessage request) {
            return base.Channel.DeleteSlideNavagation(request);
        }
        
        public void DeleteSlideNavagation(string ButtonID) {
            Inspire.Display.Service.ScheduledSlideServiceReference.DeleteSlideNavagationRequestMessage inValue = new Inspire.Display.Service.ScheduledSlideServiceReference.DeleteSlideNavagationRequestMessage();
            inValue.ButtonID = ButtonID;
            Inspire.Display.Service.ScheduledSlideServiceReference.DeleteSlideNavagationResponseMessage retVal = ((Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract)(this)).DeleteSlideNavagation(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Inspire.Display.Service.ScheduledSlideServiceReference.AddSlideNavagationResponseMessage Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract.AddSlideNavagation(Inspire.Display.Service.ScheduledSlideServiceReference.AddSlideNavagationRequestMessage request) {
            return base.Channel.AddSlideNavagation(request);
        }
        
        public void AddSlideNavagation(Inspire.Display.Service.ScheduledSlideServiceReference.Button Button) {
            Inspire.Display.Service.ScheduledSlideServiceReference.AddSlideNavagationRequestMessage inValue = new Inspire.Display.Service.ScheduledSlideServiceReference.AddSlideNavagationRequestMessage();
            inValue.Button = Button;
            Inspire.Display.Service.ScheduledSlideServiceReference.AddSlideNavagationResponseMessage retVal = ((Inspire.Display.Service.ScheduledSlideServiceReference.ScheduledSlideManagerServiceContract)(this)).AddSlideNavagation(inValue);
        }
    }
}
