//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using WCF = global::System.ServiceModel;
using Inspire.Server.Events.MessageContracts;
using Inspire.Server.Events.BusinessLogic;

namespace Inspire.Server.Events.ServiceImplementation
{	
	/// <summary>
	/// Service Class - EventService
	/// </summary>
	[WCF::ServiceBehavior(Name = "EventService", 
		Namespace = "http://schemas.inspiredisplays.com", 
		InstanceContextMode = WCF::InstanceContextMode.PerSession, 
		ConcurrencyMode = WCF::ConcurrencyMode.Single )]
	public class EventService: Inspire.Server.Events.ServiceContracts.IFeedServiceContract
	{
		#region FeedServiceContract Members

		public virtual Inspire.Server.Events.MessageContracts.AddEventResponseMessage AddEvent(Inspire.Server.Events.MessageContracts.AddEventRequestMessage request)
        {
            EventAccessFasade.AddEvent(request.Event);
            return new AddEventResponseMessage();
		}

        public virtual Inspire.Server.Events.MessageContracts.UpdateEventResponseMessage UpdateEvent(Inspire.Server.Events.MessageContracts.UpdateEventRequestMessage request)
        {
            EventAccessFasade.UpdateEvent(request.Event);
            return new UpdateEventResponseMessage();
        }


        public virtual Inspire.Server.Events.MessageContracts.GetEventsResponseMessage GetEvents(Inspire.Server.Events.MessageContracts.GetEventsRequestMessage request)
        {   
            GetEventsResponseMessage response = new GetEventsResponseMessage();
            response.HospitalityEvents = EventAccessFasade.GetEvents(request.EventDescriptionID);
            return response;
        }

        public virtual Inspire.Server.Events.MessageContracts.DeleteEventResponseMessage DeleteEvent(Inspire.Server.Events.MessageContracts.DeleteEventRequestMessage request)
        {
            EventAccessFasade.DeleteEvent(request.EventID);
            return new DeleteEventResponseMessage();
        }

        public virtual Inspire.Server.Events.MessageContracts.AddEventDefinitionResponseMessage AddEventDefinition(Inspire.Server.Events.MessageContracts.AddEventDefinitionRequestMessage request)
        {
            EventDescriptionAccessFasade.AddEventDefinitions(request.EventDefinition);
            return new AddEventDefinitionResponseMessage();
        }

        public virtual Inspire.Server.Events.MessageContracts.GetEventDefinitionsResponseMessage GetEventDefinitions(Inspire.Server.Events.MessageContracts.GetEventDefinitionsRequestMessage request)
        {
            GetEventDefinitionsResponseMessage response = new GetEventDefinitionsResponseMessage();
            response.EventDefinitions = EventDescriptionAccessFasade.GetEventDefinitions();
            return response;
        }


        public virtual Inspire.Server.Events.MessageContracts.GetDefaultEventDefinitionResponseMessage GetDefaultEventDefinition(Inspire.Server.Events.MessageContracts.GetDefaultEventDefinitionRequestMessage request)
        {
            GetDefaultEventDefinitionResponseMessage response = new GetDefaultEventDefinitionResponseMessage();
            response.EventDefinition = EventDescriptionAccessFasade.GetDefaultEventDefinition();
            return response;
        }


        public virtual Inspire.Server.Events.MessageContracts.DeleteEventDefinitionResponseMessage DeleteEventDefinition(Inspire.Server.Events.MessageContracts.DeleteEventDefinitionRequestMessage request)
        {
            EventDescriptionAccessFasade.DeleteFeed(request.EventDefinitionID);
            return new DeleteEventDefinitionResponseMessage();
        }

        public virtual Inspire.Server.Events.MessageContracts.GetEventsFilteredResponseMessage GetEventsFiltered(Inspire.Server.Events.MessageContracts.GetEventsFilteredRequestMessage request)
        {
            GetEventsFilteredResponseMessage response = new GetEventsFilteredResponseMessage();
            response.HospitalityEvents = EventAccessFasade.GetEventsFiltered(request.EventDescriptionID, request.HostName);
            return response;
        }

        public virtual Inspire.Server.Events.MessageContracts.GetEventsNonFilteredResponseMessage GetEventsNonFiltered(Inspire.Server.Events.MessageContracts.GetEventsNonFilteredRequestMessage request)
        {
            GetEventsNonFilteredResponseMessage response = new GetEventsNonFilteredResponseMessage();
            response.HospitalityEvents = EventAccessFasade.GetEventsNonFiltered(request.EventDescriptionID, request.HostName);
            return response;
        }

        public virtual Inspire.Server.Events.MessageContracts.LoadEventsResponseMessage LoadEvents(Inspire.Server.Events.MessageContracts.LoadEventsRequestMessage request)
        {
            EventAccessFasade.LoadEvents();
            return new LoadEventsResponseMessage();
        }

        public virtual Inspire.Server.Events.MessageContracts.UpdateEventDefinitionResponseMessage UpdateEventDefinition(Inspire.Server.Events.MessageContracts.UpdateEventDefinitionRequestMessage request)
        {
            UpdateEventDefinitionResponseMessage response = new UpdateEventDefinitionResponseMessage();
            EventDescriptionAccessFasade.UpdateEventDefinition(request.EventDefinition);
            return response;
        }

        public virtual Inspire.Server.Events.MessageContracts.SetDefaultEventDefinitionResponseMessage SetDefaultEventDefinition(Inspire.Server.Events.MessageContracts.SetDefaultEventDefinitionRequestMessage request)
        {
            SetDefaultEventDefinitionResponseMessage response = new SetDefaultEventDefinitionResponseMessage();
            EventDescriptionAccessFasade.SetDefaultDefinition(request.EventDefinition);
            return response;
        }

        public virtual Inspire.Server.Events.MessageContracts.TruncateEventsResponseMessage TruncateEvents(Inspire.Server.Events.MessageContracts.TruncateEventsRequestMessage request)
        {
            TruncateEventsResponseMessage response = new TruncateEventsResponseMessage();
            EventAccessFasade.TuncateEvents(request.EventDefinitionID);
            return response;
        }

        //EventFileFormat

        public virtual Inspire.Server.Events.MessageContracts.GetEventFileFormatResponseMessage GetEventFileFormat(Inspire.Server.Events.MessageContracts.GetEventFileFormatRequestMessage request)
        {
            GetEventFileFormatResponseMessage response = new GetEventFileFormatResponseMessage();
            response.EventFileFormat = EventFileFormatAccessFasade.GetEventFileFormat(request.EventFileFormatGuid);
            return response;
        }

        public virtual Inspire.Server.Events.MessageContracts.GetEventFileFormatsResponseMessage GetEventFileFormats(Inspire.Server.Events.MessageContracts.GetEventFileFormatsRequestMessage request)
        {
            GetEventFileFormatsResponseMessage response = new GetEventFileFormatsResponseMessage();
            response.EventFileFormats = EventFileFormatAccessFasade.GetEventFileFormats();
            return response;
        }

        public virtual Inspire.Server.Events.MessageContracts.AddEventFileFormatResponseMessage AddEventFileFormat(Inspire.Server.Events.MessageContracts.AddEventFileFormatRequestMessage request)
        {
            AddEventFileFormatResponseMessage response = new AddEventFileFormatResponseMessage();
            EventFileFormatAccessFasade.AddEventFileFormat(request.EventFileFormat);
            return response;
        }

        public virtual Inspire.Server.Events.MessageContracts.UpdateEventFileFormatResponseMessage UpdateEventFileFormat(Inspire.Server.Events.MessageContracts.UpdateEventFileFormatRequestMessage request)
        {
            UpdateEventFileFormatResponseMessage response = new UpdateEventFileFormatResponseMessage();
            EventFileFormatAccessFasade.UpdateEventFileFormat(request.EventFileFormat);
            return response;
        }

        public virtual Inspire.Server.Events.MessageContracts.DeleteEventFileFormatResponseMessage DeleteEventFileFormat(Inspire.Server.Events.MessageContracts.DeleteEventFileFormatRequestMessage request)
        {
            DeleteEventFileFormatResponseMessage response = new DeleteEventFileFormatResponseMessage();
            EventFileFormatAccessFasade.DeleteEventFileFormat(request.EventFileFormatID);
            return response;
        }



		#endregion		
		
	}
	
	
	
}

