//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Inspire.Server.Display.DataContracts;
using Inspire.Server.Display.BusinessLogic;
using Inspire.Server.Display.MessageContracts;
using WCF = global::System.ServiceModel;
using Inspire.Server.Display.ServiceContracts;
using System.ServiceModel.Activation;

namespace Inspire.Server.Display.ServiceImplementation
{	
	/// <summary>
	/// Service Class - ClientDisplayService
	/// </summary>
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
	[WCF::ServiceBehavior(Name = "ClientDisplayService", 
		Namespace = "http://schemas.inspiredisplays.com/ServiceContract.Model/", 
		InstanceContextMode = WCF::InstanceContextMode.PerSession, 
		ConcurrencyMode = WCF::ConcurrencyMode.Single )]
	public abstract class ClientDisplayServiceBase : IClientDisplayServiceContract
	{
		#region ClientDisplayServiceContract Members

		public virtual GetDisplaysResponseMessage GetDisplays(GetDisplaysRequestMessage request)
		{
            GetDisplaysResponseMessage response = new GetDisplaysResponseMessage();
            response.Displays = new Displays();
            response.Displays = DisplayAccessFasade.GetDisplays(request.GroupID);
            return response;
		}

		public virtual AddDisplayResponseMessage AddDisplay(AddDisplayRequestMessage request)
		{
            Inspire.Server.Display.DataContracts.Display display = request.Display;
            DisplayAccessFasade.AddDisplay(display);
            AddDisplayResponseMessage response = new AddDisplayResponseMessage();
            return response;
		}

		public virtual UpdateDisplaysResponseMessage UpdateDisplay(UpdateDisplaysRequestMessage request)
		{
            Inspire.Server.Display.DataContracts.Display display = request.Display;
            DisplayAccessFasade.UpdateDisplay(display);
            UpdateDisplaysResponseMessage response = new UpdateDisplaysResponseMessage();
            return response;
		}

		public virtual DeleteDisplaysResponseMessage DeleteDisplay(DeleteDisplaysRequestMessage request)
		{
            string guid = request.GUID;
            DisplayAccessFasade.DeleteDisplay(guid);
            DeleteDisplaysResponseMessage response = new DeleteDisplaysResponseMessage();
            return response;
		}

		public virtual GetSingleDisplaysResponseMessage GetSingleDisplay(GetSingleDisplaysRequestMessage request)
		{
            GetSingleDisplaysResponseMessage response = new GetSingleDisplaysResponseMessage();
            response.Display = new Inspire.Server.Display.DataContracts.Display();
            response.Display = DisplayAccessFasade.GetSingleDisplays(request.DisplayID);
            return response;
		}

        public virtual GetDisplaysInScheduleResponseMessage GetDisplaysInSchedule(GetDisplaysInScheduleRequestMessage request)
        {
            GetDisplaysInScheduleResponseMessage response = new GetDisplaysInScheduleResponseMessage();
            response.Displays = new Displays();
            response.Displays = DisplayAccessFasade.GetDisplaysInSchedule(request.ScheduleID);
            return response;
        }
        public virtual GetAllDisplaysResponseMessage GetAllDisplays(GetAllDisplaysRequestMessage request)
        {
            GetAllDisplaysResponseMessage response = new GetAllDisplaysResponseMessage();
            response.Displays = new Displays();
            response.Displays = DisplayAccessFasade.GetAllDisplays();
            return response;
        }
        
		#endregion		
		
	}
	
	public partial class ClientDisplayService : ClientDisplayServiceBase
	{
	}
	
}

