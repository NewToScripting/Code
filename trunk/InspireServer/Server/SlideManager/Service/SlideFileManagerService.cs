//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.IO;
using System.ServiceModel.Activation;
using Inspire.Server.SlideManager.DataContracts;
using Inspire.Server.SlideManager.MessageContracts;
using WCF = global::System.ServiceModel;
using Inspire.Server.SlideManager.BusinessLogic;
using System.Web;
using Inspire.Server.SlideManager.ServiceContracts;

namespace Inspire.Server.SlideManager.ServiceImplementation
{	
	/// <summary>
	/// Service Class - SlideFileManagerService
	/// </summary>
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
	[WCF::ServiceBehavior(Name = "SlideFileManagerService", Namespace = "http://schemas.inspiredisplays.com", InstanceContextMode = WCF::InstanceContextMode.PerSession, ConcurrencyMode = WCF::ConcurrencyMode.Single )]
	public abstract class SlideFileManagerServiceBase : ISlideFileManagerServiceContract
	{
	    protected SlideFileManagerServiceBase()
        {
            HttpContext httpContext = HttpContext.Current;
            if (httpContext != null)
            {
                httpContext.Response.BufferOutput = false;
            }
        }


		#region SlideFileManagerServiceContract Members

		public virtual GetSlideFileResponseMessage GetSlideFile(GetSlideFileRequestMessage request)
		{
            GetSlideFileResponseMessage response = new GetSlideFileResponseMessage();
          
            SlideFile slidefile = SlideManagerAccessFasade.GetSlideFile(request.SlideID);

            response.SlideFileStream = new MemoryStream(slidefile.File);
		    response.SlideFileID = slidefile.GUID;
		    response.SlideFileSize = slidefile.File.Length;

            return response;
		}

		public virtual AddSlideFileResponseMessage AddSlideFile(AddSlideFileRequestMessage request)
		{
            SlideFile slidefile = new SlideFile();
            
            slidefile.File = StreamToBytes.ReadFully(request.SlideFileStream, request.SlideFileSize);
            slidefile.GUID = request.SlideFileID;
            SlideManagerAccessFasade.AddSlideFile(slidefile);

            AddSlideFileResponseMessage response = new AddSlideFileResponseMessage();
            return response;
		}

		public virtual UpdateSlideFileResponseMessage UpdateSlideFile(UpdateSlideFileRequestMessage request)
		{
            SlideFile slidefile = new SlideFile();

            slidefile.File = StreamToBytes.ReadFully(request.SlideFileStream, request.SlideFileSize);
            slidefile.GUID = request.SlideFileID;
            
            SlideManagerAccessFasade.UpdateSlideFile(slidefile);
            UpdateSlideFileResponseMessage response = new UpdateSlideFileResponseMessage();
            return response;
		}

		public virtual DeleteSlideFileResponseMessage DeleteSlideFile(DeleteSlideFileRequestMessage request)
		{
            SlideManagerAccessFasade.DeleteSlideFile(request.SlideID);
            DeleteSlideFileResponseMessage response = new DeleteSlideFileResponseMessage();
            return response;
		}

		#endregion		
		
	}
	
	public partial class SlideFileManagerService : SlideFileManagerServiceBase
	{
	}
	
}

