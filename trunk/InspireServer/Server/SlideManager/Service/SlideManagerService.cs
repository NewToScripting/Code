//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ServiceModel.Activation;
using Inspire.Server.SlideManager.DataContracts;
using Inspire.Server.SlideManager.MessageContracts;
using WCF = global::System.ServiceModel;
using Inspire.Server.SlideManager.BusinessLogic;

namespace Inspire.Server.SlideManager.ServiceImplementation
{	
	/// <summary>
	/// Service Class - SlideManagerService
	/// </summary>
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
	[WCF::ServiceBehavior(Name = "SlideManagerService", Namespace = "http://schemas.inspiredisplays.com", InstanceContextMode = WCF::InstanceContextMode.PerSession, ConcurrencyMode = WCF::ConcurrencyMode.Single )]
	public abstract class SlideManagerServiceBase : Inspire.Server.SlideManager.ServiceContracts.ISlideManagerServiceContract
	{
		#region SlideManagerServiceContract Members

		public virtual Inspire.Server.SlideManager.MessageContracts.GetAllSlidesResponseMessage GetAllSlides(Inspire.Server.SlideManager.MessageContracts.GetAllSlidesRequestMessage request)
		{
            GetAllSlidesResponseMessage response = new GetAllSlidesResponseMessage();
            response.Slides =SlideManagerAccessFasade.GetAllSlides(); 
            return response;
		}

        public virtual Inspire.Server.SlideManager.MessageContracts.GetSlideResponseMessage GetSlide(Inspire.Server.SlideManager.MessageContracts.GetSlideRequestMessage request)
        {
            GetSlideResponseMessage response = new GetSlideResponseMessage();
            response.Slide = SlideManagerAccessFasade.GetSlide(request.SlideID);
            return response;
        }

		public virtual Inspire.Server.SlideManager.MessageContracts.AddSlideResponseMessage AddSlide(Inspire.Server.SlideManager.MessageContracts.AddSlideRequestMessage request)
		{
            SlideManagerAccessFasade.AddSlide(request.Slide);
            AddSlideResponseMessage response = new AddSlideResponseMessage();
            return response;
		}

		public virtual Inspire.Server.SlideManager.MessageContracts.UpdateSlideResponseMessage UpdateSlide(Inspire.Server.SlideManager.MessageContracts.UpdateSlideRequestMessage request)
		{
            SlideManagerAccessFasade.UpdateSlide(request.Slide);
            UpdateSlideResponseMessage response = new UpdateSlideResponseMessage();
            return response;
		}

		public virtual Inspire.Server.SlideManager.MessageContracts.DeleteSlideResponseMessage DeleteSlide(Inspire.Server.SlideManager.MessageContracts.DeleteSlideRequestMessage request)
		{
            SlideManagerAccessFasade.DeleteSlide(request.SlideID);
            DeleteSlideResponseMessage response = new DeleteSlideResponseMessage();
            return response;
		}

        public virtual DeleteButtonResponseMessage DeleteButton(DeleteButtonRequestMessage request)
        {
            SlideManagerAccessFasade.DeleteButton(request.ButtonID);
            return new DeleteButtonResponseMessage();
        }

        public virtual AddButtonResponseMessage AddButton(AddButtonRequestMessage request)
        {
            SlideManagerAccessFasade.AddButton(request.Button);

            return new AddButtonResponseMessage();
        }

		#endregion		
		
	}
	
	public partial class SlideManagerService : SlideManagerServiceBase
	{
	}
	
}

