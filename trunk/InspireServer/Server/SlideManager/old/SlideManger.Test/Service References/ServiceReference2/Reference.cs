//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3031
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SlideManger.Test.ServiceReference2 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DefaultFaultContract", Namespace="http://schemas.inspiredisplays.com")]
    [System.SerializableAttribute()]
    public partial class DefaultFaultContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDescField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDesc {
            get {
                return this.ErrorDescField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDescField, value) != true)) {
                    this.ErrorDescField = value;
                    this.RaisePropertyChanged("ErrorDesc");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.inspiredisplays.com", ConfigurationName="ServiceReference2.SlideFileManagerServiceContract")]
    public interface SlideFileManagerServiceContract {
        
        // CODEGEN: Generating message contract since the operation GetSlideFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract1/GetSlideFile", ReplyAction="http://schemas.inspiredisplays.com/SlideFileManagerServiceContract/GetSlideFileRe" +
            "sponse")]
        SlideManger.Test.ServiceReference2.GetSlideFileResponseMessage GetSlideFile(SlideManger.Test.ServiceReference2.GetSlideFlieRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation AddSlideFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract1/AddSlideFile", ReplyAction="http://schemas.inspiredisplays.com/SlideFileManagerServiceContract/AddSlideFileRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SlideManger.Test.ServiceReference2.DefaultFaultContract), Action="http://schemas.inspiredisplays.com/SlideFileManagerServiceContract/AddSlideFileDe" +
            "faultFaultContractFault", Name="DefaultFaultContract")]
        SlideManger.Test.ServiceReference2.AddSlideFileResponseMessage AddSlideFile(SlideManger.Test.ServiceReference2.AddSlideFileRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation UpdateSlideFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract1/UpdateSlideFile", ReplyAction="http://schemas.inspiredisplays.com/SlideFileManagerServiceContract/UpdateSlideFil" +
            "eResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SlideManger.Test.ServiceReference2.DefaultFaultContract), Action="http://schemas.inspiredisplays.com/SlideFileManagerServiceContract/UpdateSlideFil" +
            "eDefaultFaultContractFault", Name="DefaultFaultContract")]
        SlideManger.Test.ServiceReference2.UpdateSlideFileResponseMessage UpdateSlideFile(SlideManger.Test.ServiceReference2.UpdateSlideFilerRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation DeleteSlideFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.inspiredisplays.com/ServiceContract1/DeleteSlideFile", ReplyAction="http://schemas.inspiredisplays.com/SlideFileManagerServiceContract/DeleteSlideFil" +
            "eResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SlideManger.Test.ServiceReference2.DefaultFaultContract), Action="http://schemas.inspiredisplays.com/SlideFileManagerServiceContract/DeleteSlideFil" +
            "eDefaultFaultContractFault", Name="DefaultFaultContract")]
        SlideManger.Test.ServiceReference2.DeleteSlideFlieResponseMessage DeleteSlideFile(SlideManger.Test.ServiceReference2.DeleteSlideFlieRequestMessage request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetSlideFlieRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com", Order=0)]
        public string SlideID;
        
        public GetSlideFlieRequestMessage() {
        }
        
        public GetSlideFlieRequestMessage(string SlideID) {
            this.SlideID = SlideID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetSlideFileResponseMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.inspiredisplays.com")]
        public string SlideFileID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com", Order=0)]
        public System.IO.Stream SlideFileStream;
        
        public GetSlideFileResponseMessage() {
        }
        
        public GetSlideFileResponseMessage(string SlideFileID, System.IO.Stream SlideFileStream) {
            this.SlideFileID = SlideFileID;
            this.SlideFileStream = SlideFileStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddSlideFileRequestMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.inspiredisplays.com")]
        public string SlideFileID;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.inspiredisplays.com")]
        public int SlideFileSize;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com", Order=0)]
        public System.IO.Stream SlideFileStream;
        
        public AddSlideFileRequestMessage() {
        }
        
        public AddSlideFileRequestMessage(string SlideFileID, int SlideFileSize, System.IO.Stream SlideFileStream) {
            this.SlideFileID = SlideFileID;
            this.SlideFileSize = SlideFileSize;
            this.SlideFileStream = SlideFileStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddSlideFileResponseMessage {
        
        public AddSlideFileResponseMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateSlideFilerRequestMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.inspiredisplays.com")]
        public string SlideFileID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com", Order=0)]
        public System.IO.Stream SlideFileStream;
        
        public UpdateSlideFilerRequestMessage() {
        }
        
        public UpdateSlideFilerRequestMessage(string SlideFileID, System.IO.Stream SlideFileStream) {
            this.SlideFileID = SlideFileID;
            this.SlideFileStream = SlideFileStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateSlideFileResponseMessage {
        
        public UpdateSlideFileResponseMessage() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteSlideFlieRequestMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.inspiredisplays.com", Order=0)]
        public string SlideID;
        
        public DeleteSlideFlieRequestMessage() {
        }
        
        public DeleteSlideFlieRequestMessage(string SlideID) {
            this.SlideID = SlideID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteSlideFlieResponseMessage {
        
        public DeleteSlideFlieResponseMessage() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface SlideFileManagerServiceContractChannel : SlideManger.Test.ServiceReference2.SlideFileManagerServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SlideFileManagerServiceContractClient : System.ServiceModel.ClientBase<SlideManger.Test.ServiceReference2.SlideFileManagerServiceContract>, SlideManger.Test.ServiceReference2.SlideFileManagerServiceContract {
        
        public SlideFileManagerServiceContractClient() {
        }
        
        public SlideFileManagerServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SlideFileManagerServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SlideFileManagerServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SlideFileManagerServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SlideManger.Test.ServiceReference2.GetSlideFileResponseMessage SlideManger.Test.ServiceReference2.SlideFileManagerServiceContract.GetSlideFile(SlideManger.Test.ServiceReference2.GetSlideFlieRequestMessage request) {
            return base.Channel.GetSlideFile(request);
        }
        
        public string GetSlideFile(string SlideID, out System.IO.Stream SlideFileStream) {
            SlideManger.Test.ServiceReference2.GetSlideFlieRequestMessage inValue = new SlideManger.Test.ServiceReference2.GetSlideFlieRequestMessage();
            inValue.SlideID = SlideID;
            SlideManger.Test.ServiceReference2.GetSlideFileResponseMessage retVal = ((SlideManger.Test.ServiceReference2.SlideFileManagerServiceContract)(this)).GetSlideFile(inValue);
            SlideFileStream = retVal.SlideFileStream;
            return retVal.SlideFileID;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SlideManger.Test.ServiceReference2.AddSlideFileResponseMessage SlideManger.Test.ServiceReference2.SlideFileManagerServiceContract.AddSlideFile(SlideManger.Test.ServiceReference2.AddSlideFileRequestMessage request) {
            return base.Channel.AddSlideFile(request);
        }
        
        public void AddSlideFile(string SlideFileID, int SlideFileSize, System.IO.Stream SlideFileStream) {
            SlideManger.Test.ServiceReference2.AddSlideFileRequestMessage inValue = new SlideManger.Test.ServiceReference2.AddSlideFileRequestMessage();
            inValue.SlideFileID = SlideFileID;
            inValue.SlideFileSize = SlideFileSize;
            inValue.SlideFileStream = SlideFileStream;
            SlideManger.Test.ServiceReference2.AddSlideFileResponseMessage retVal = ((SlideManger.Test.ServiceReference2.SlideFileManagerServiceContract)(this)).AddSlideFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SlideManger.Test.ServiceReference2.UpdateSlideFileResponseMessage SlideManger.Test.ServiceReference2.SlideFileManagerServiceContract.UpdateSlideFile(SlideManger.Test.ServiceReference2.UpdateSlideFilerRequestMessage request) {
            return base.Channel.UpdateSlideFile(request);
        }
        
        public void UpdateSlideFile(string SlideFileID, System.IO.Stream SlideFileStream) {
            SlideManger.Test.ServiceReference2.UpdateSlideFilerRequestMessage inValue = new SlideManger.Test.ServiceReference2.UpdateSlideFilerRequestMessage();
            inValue.SlideFileID = SlideFileID;
            inValue.SlideFileStream = SlideFileStream;
            SlideManger.Test.ServiceReference2.UpdateSlideFileResponseMessage retVal = ((SlideManger.Test.ServiceReference2.SlideFileManagerServiceContract)(this)).UpdateSlideFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SlideManger.Test.ServiceReference2.DeleteSlideFlieResponseMessage SlideManger.Test.ServiceReference2.SlideFileManagerServiceContract.DeleteSlideFile(SlideManger.Test.ServiceReference2.DeleteSlideFlieRequestMessage request) {
            return base.Channel.DeleteSlideFile(request);
        }
        
        public void DeleteSlideFile(string SlideID) {
            SlideManger.Test.ServiceReference2.DeleteSlideFlieRequestMessage inValue = new SlideManger.Test.ServiceReference2.DeleteSlideFlieRequestMessage();
            inValue.SlideID = SlideID;
            SlideManger.Test.ServiceReference2.DeleteSlideFlieResponseMessage retVal = ((SlideManger.Test.ServiceReference2.SlideFileManagerServiceContract)(this)).DeleteSlideFile(inValue);
        }
    }
}
